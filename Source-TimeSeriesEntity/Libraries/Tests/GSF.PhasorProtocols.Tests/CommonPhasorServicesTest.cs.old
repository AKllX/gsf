#region [ Using ]
using GSF.PhasorProtocols;
using GSF.TestsSuite.TimeSeries.Cases;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using GSF.TestsSuite.PhasorProtocols.Cases.IEEE.C37118;
using GSF.TestsSuite.TimeSeries.Cases;
#endregion

namespace GSF.PhasorProtocols.Tests
{

    /// <summary>
    ///This is a test class for CommonPhasorServicesTest and is intended
    ///to contain all CommonPhasorServicesTest Unit Tests
    ///</summary>
    [TestClass()]
    public class CommonPhasorServicesTest
    {
        #region [ Members ]
        private ConfigurationCellCase m_ConfigurationCellCase;
        private IAdapterInitializationCase m_IAdapterInitializationCase;
        private IMeasurementsCase m_IMeasurementsCase;
        #endregion

        #region [ Context ]

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #endregion

        #region [ Additional test attributes ]
        //
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        [TestInitialize()]
        public void MyTestInitialize()
        {
            m_ConfigurationCellCase = new ConfigurationCellCase();
            m_IAdapterInitializationCase = new IAdapterInitializationCase();
            m_IMeasurementsCase = new IMeasurementsCase();
        }
        //
        //Use TestCleanup to run code after each test has run
        [TestCleanup()]
        public void MyTestCleanup()
        {

        }
        //
        #endregion

        #region [ Methods ]

        /// <summary>
        ///A test for CommonPhasorServices Constructor
        ///</summary>
        [TestMethod()]
        public void CommonPhasorServicesConstructorTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            Assert.IsNotNull(target);
            Assert.IsInstanceOfType(target, typeof(CommonPhasorServices));
        }

        /// <summary>
        ///A test for EnumerateClients
        ///</summary>
        [TestMethod()]
        public void EnumerateClientsTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            try
            {
                target.EnumerateClients();
                Assert.IsTrue(true);
            }
            catch
            {
                Assert.IsFalse(false);
            }
        }

        /// <summary>
        ///A test for GetShortStatus
        ///</summary>
        [TestMethod()]
        public void GetShortStatusTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            int maxLength = 0;
            string expected = string.Empty;
            string actual;
            actual = target.GetShortStatus(maxLength);
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for GetSubscriberInfo
        ///</summary>
        [TestMethod()]
        public void GetSubscriberInfoTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            int clientIndex = 0;
            string expected = string.Empty;
            string actual;
            actual = target.GetSubscriberInfo(clientIndex);
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for Initialize
        ///</summary>
        [TestMethod()]
        public void InitializeTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            try
            {
                target.Initialize();
            }
            catch
            {
                Assert.IsTrue(false);
            }
        }

        /// <summary>
        ///A test for QueueMeasurementsForProcessing
        ///</summary>
        [TestMethod()]
        public void QueueMeasurementsForProcessingTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            System.Collections.Generic.IEnumerable<TimeSeriesFramework.IMeasurement> measurements = null;
            try
            {
                target.QueueMeasurementsForProcessing(measurements);
            }
            catch
            {
                Assert.IsTrue(false);
            }
        }

        /// <summary>
        ///A test for RequestDeviceConfiguration
        ///TODO: Indirect testing see TSF FacileActionAdapterBase
        ///</summary>
        /*[TestMethod()]
        public void RequestDeviceConfigurationTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            string connectionString = m_ConfigurationCellCase.ConnectionString;
            GSF.PhasorProtocols.IConfigurationFrame expected = m_ConfigurationCellCase.ConfigurationFrame1;
            GSF.PhasorProtocols.IConfigurationFrame actual;
            actual = target.RequestDeviceConfiguration(connectionString);
            Assert.AreEqual(expected, actual);
        }*/

        /// <summary>
        ///A test for RotateCipherKeys
        ///</summary>
        [TestMethod()]
        public void RotateCipherKeysTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            int clientIndex = 0;
            try
            {
                target.RotateCipherKeys(clientIndex);
            }
            catch
            {
                Assert.IsTrue(false);
            }
        }

        /// <summary>
        ///A test for SendCommand
        ///</summary>
        [TestMethod()]
        public void SendCommandTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            GSF.PhasorProtocols.DeviceCommand command = new GSF.PhasorProtocols.DeviceCommand();
            try
            {
                target.SendCommand(command);
            }
            catch
            {
                Assert.IsTrue(false);
            }
        }

        /// <summary>
        ///A test for Start
        ///</summary>
        [TestMethod()]
        public void StartTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            try
            {
                target.Start();
            }
            catch
            {
                Assert.IsTrue(false);
            }
        }

        /// <summary>
        ///A test for Stop
        ///</summary>
        /*
        [TestMethod()]
        public void StopTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            try
            {
                target.Stop();
            }
            catch
            {
                Assert.IsTrue(false);
            }
        }*/

        /// <summary>
        ///A test for DataSource
        ///</summary>
        [TestMethod()]
        public void DataSourceTest()
        {


            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            System.Data.DataSet expected = m_IAdapterInitializationCase.DataSource;
            System.Data.DataSet actual;
            target.DataSource = expected;
            actual = target.DataSource;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for InputMeasurementKeys
        ///TODO:
        ///</summary>
        /*
        [TestMethod()]
        public void InputMeasurementKeysTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            TimeSeriesFramework.MeasurementKey[] expected = m_IMeasurementsCase.MeasurementKeys;
            TimeSeriesFramework.MeasurementKey[] actual;
            target.InputMeasurementKeys = expected;
            actual = target.InputMeasurementKeys;
            Assert.AreEqual(expected, actual);
        }*/

        /// <summary>
        ///A test for OutputMeasurements
        ///TODO:
        ///</summary>
        /*[TestMethod()]
        public void OutputMeasurementsTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            TimeSeriesFramework.IMeasurement[] expected = m_IMeasurementsCase.MeasurementsArray;
            TimeSeriesFramework.IMeasurement[] actual;
            target.OutputMeasurements = expected;
            actual = target.OutputMeasurements;
            Assert.AreEqual(expected, actual);
        }*/

        /// <summary>
        ///A test for Status
        ///</summary>
        [TestMethod()]
        public void StatusTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            string actual;
            actual = target.Status;
            Assert.IsNotNull(actual);
            Assert.IsInstanceOfType(actual, typeof(string));
        }

        /// <summary>
        ///A test for SupportsTemporalProcessing
        ///</summary>
        [TestMethod()]
        public void SupportsTemporalProcessingTest()
        {
            GSF.PhasorProtocols.CommonPhasorServices target = new GSF.PhasorProtocols.CommonPhasorServices();
            bool actual;
            actual = target.SupportsTemporalProcessing;
        }
        #endregion
    }
}
