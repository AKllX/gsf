using GSF.PhasorProtocols;
using GSF.PhasorProtocols.Anonymous;
using GSF.TestsSuite.TimeSeries.Cases;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using GSF.TestsSuite.PhasorProtocols.Cases.IEEE.C37118;
using GSF.TestsSuite.TimeSeries.Cases;
using GSF.TimeSeries;
using System;

namespace GSF.PhasorProtocols.Tests
{
    /// <summary>
    ///This is a test class for PhasorDataConcentratorBaseTest and is intended
    ///to contain all PhasorDataConcentratorBaseTest Unit Tests
    ///</summary>
    [TestClass()]
    public class PhasorDataConcentratorBaseTest
    {

        #region [ Class ]
        private class PhasorDataConcentratorBaseWrapper : PhasorDataConcentratorBase
        {
            public PhasorDataConcentratorBaseWrapper () : base ()
            {}

            protected override IConfigurationFrame CreateNewConfigurationFrame(GSF.PhasorProtocols.Anonymous.ConfigurationFrame baseConfigurationFrame)
            {
                ushort frameRate = 33;
                ushort timeStamp = 2;
                ConfigurationFrame configurationFrame = new ConfigurationFrame(timeStamp, new Ticks(), frameRate);
                return configurationFrame;
            }

            public override int GetHashCode()
            {
                int guid = "UnitTestingConcentratorBaseWrapper".GetHashCode() ;
                return guid;
            }

        }
        #endregion

        #region [ Members ]
        private PhasorDataConcentratorBaseWrapper target;
        private ConfigurationCellCase m_ConfigurationCellCase;
        private IMeasurementCase m_IMeasurementCase;
        private IMeasurementsCase m_IMeasurementsCase;
        #endregion


        #region [ Context ]
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #endregion

        #region [ Additional test attributes ]
        //
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        [TestInitialize()]
        public void MyTestInitialize()
        {
            target = new PhasorDataConcentratorBaseWrapper();
            m_ConfigurationCellCase = new ConfigurationCellCase();
            m_IMeasurementCase = new IMeasurementCase();
            m_IMeasurementsCase = new IMeasurementsCase();
            target.InputMeasurementKeys = m_ConfigurationCellCase.Concentrator.InputMeasurementKeys;
            target.DataSource = m_ConfigurationCellCase.Concentrator.DataSource;
            target.ConnectionString = m_ConfigurationCellCase.ConnectionString;
        }
        //
        //Use TestCleanup to run code after each test has run
        [TestCleanup()]
        public void MyTestCleanup()
        {
        }
        //
        #endregion

        #region [ Methods ]
        /// <summary>
        ///A test for GetHashCode
        ///</summary>
        [TestMethod()]
        public void GetHashCodeTest()
        {
            int expected = -1150275760;
            int actual;
            actual = target.GetHashCode();
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for GetSignalReference
        ///</summary>
        [TestMethod()]
        public void GetSignalReferenceTest()
        {
            GSF.PhasorProtocols.SignalKind type = new GSF.PhasorProtocols.SignalKind();
            int index = 0;
            int count = 1;
            string expected = "PhasorDataConcentratorBaseWrapper!OS-PA1";
            string actual;
            actual = target.GetSignalReference(type, index, count);
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for GetSignalReference
        ///</summary>
        [TestMethod()]
        public void GetSignalReferenceTest1()
        {
            GSF.PhasorProtocols.SignalKind type = new GSF.PhasorProtocols.SignalKind();
            string expected = "PhasorDataConcentratorBaseWrapper!OS-PA";
            string actual;
            actual = target.GetSignalReference(type);
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for Initialize
        ///</summary>
        [TestMethod()]
        public void InitializeTest()
        {
            target.Initialize();
        }

        /// <summary>
        ///A test for QueueMeasurementForProcessing
        ///</summary>
        [TestMethod()]
        public void QueueMeasurementForProcessingTest()
        {
            TimeSeriesFramework.IMeasurement measurement = m_IMeasurementCase.Measurement;
            target.QueueMeasurementForProcessing(measurement);
        }

        /// <summary>
        ///A test for QueueMeasurementsForProcessing
        ///</summary>
        [TestMethod()]
        public void QueueMeasurementsForProcessingTest()
        {
            System.Collections.Generic.IEnumerable<TimeSeriesFramework.IMeasurement> measurements = m_IMeasurementsCase.Measurements;
            target.QueueMeasurementsForProcessing(measurements);
        }

        /// <summary>
        ///A test for ResetLatencyCounters
        ///</summary>
        [TestMethod()]
        public void ResetLatencyCountersTest()
        {
            target.ResetLatencyCounters();
        }

        /// <summary>
        ///A test for Start
        ///</summary>
        [TestMethod()]
        public void StartTest()
        {
            target.Start();
        }

        /// <summary>
        ///A test for StartDataChannel
        ///</summary>
        [TestMethod()]
        public void StartDataChannelTest()
        {
            target.StartDataChannel();
        }

        /// <summary>
        ///A test for Stop
        ///</summary>
        [TestMethod()]
        public void StopTest()
        {
            target.Stop();
        }

        /// <summary>
        ///A test for StopDataChannel
        ///</summary>
        [TestMethod()]
        public void StopDataChannelTest()
        {
            target.StopDataChannel();
        }

        /// <summary>
        ///A test for UpdateConfiguration
        ///</summary>
        [TestMethod()]
        public void UpdateConfigurationTest()
        {
            target.UpdateConfiguration();
        }

        /// <summary>
        ///A test for ActiveConnections
        ///</summary>
        [TestMethod()]
        public void ActiveConnectionsTest()
        {
            long actual;
            actual = target.ActiveConnections;
        }

        /// <summary>
        ///A test for AnalogScalingValue
        ///</summary>
        [TestMethod()]
        public void AnalogScalingValueTest()
        {
            uint expected = 0;
            uint actual;
            target.AnalogScalingValue = expected;
            actual = target.AnalogScalingValue;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for AutoPublishConfigurationFrame
        ///</summary>
        [TestMethod()]
        public void AutoPublishConfigurationFrameTest()
        {
            bool expected = false;
            bool actual;
            target.AutoPublishConfigurationFrame = expected;
            actual = target.AutoPublishConfigurationFrame;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for AutoStartDataChannel
        ///</summary>
        [TestMethod()]
        public void AutoStartDataChannelTest()
        {
            bool expected = false;
            bool actual;
            target.AutoStartDataChannel = expected;
            actual = target.AutoStartDataChannel;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for AverageLatency
        ///</summary>
        [TestMethod()]
        public void AverageLatencyTest()
        {
            int actual;
            actual = target.AverageLatency;
        }

        /// <summary>
        ///A test for BaseConfigurationFrame
        ///</summary>
        [TestMethod()]
        public void BaseConfigurationFrameTest()
        {
            GSF.PhasorProtocols.Anonymous.ConfigurationFrame actual;
            actual = target.BaseConfigurationFrame;
        }

        /// <summary>
        ///A test for ConfigurationFrame
        ///</summary>
        [TestMethod()]
        public void ConfigurationFrameTest()
        {
            GSF.PhasorProtocols.IConfigurationFrame expected = null;
            GSF.PhasorProtocols.IConfigurationFrame actual;
            target.ConfigurationFrame = expected;
            actual = target.ConfigurationFrame;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for ConnectedClientCount
        ///</summary>
        [TestMethod()]
        public void ConnectedClientCountTest()
        {
            int actual;
            actual = target.ConnectedClientCount;
        }

        /// <summary>
        ///A test for CoordinateFormat
        ///</summary>
        [TestMethod()]
        public void CoordinateFormatTest()
        {
            GSF.PhasorProtocols.CoordinateFormat expected = new GSF.PhasorProtocols.CoordinateFormat();
            GSF.PhasorProtocols.CoordinateFormat actual;
            target.CoordinateFormat = expected;
            actual = target.CoordinateFormat;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for CurrentScalingValue
        ///</summary>
        [TestMethod()]
        public void CurrentScalingValueTest()
        {
            uint expected = 0;
            uint actual;
            target.CurrentScalingValue = expected;
            actual = target.CurrentScalingValue;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for DataFormat
        ///</summary>
        [TestMethod()]
        public void DataFormatTest()
        {
            GSF.PhasorProtocols.DataFormat expected = new GSF.PhasorProtocols.DataFormat();
            GSF.PhasorProtocols.DataFormat actual;
            target.DataFormat = expected;
            actual = target.DataFormat;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for DigitalMaskValue
        ///</summary>
        [TestMethod()]
        public void DigitalMaskValueTest()
        {
            uint expected = 0;
            uint actual;
            target.DigitalMaskValue = expected;
            actual = target.DigitalMaskValue;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for IDCode
        ///</summary>
        [TestMethod()]
        public void IDCodeTest()
        {
            ushort actual;
            actual = target.IDCode;
        }

        /// <summary>
        ///A test for MaximumLatency
        ///</summary>
        [TestMethod()]
        public void MaximumLatencyTest()
        {
            int actual;
            actual = target.MaximumLatency;
        }

        /// <summary>
        ///A test for MinimumLatency
        ///</summary>
        [TestMethod()]
        public void MinimumLatencyTest()
        {
            int actual;
            actual = target.MinimumLatency;
        }

        /// <summary>
        ///A test for NominalFrequency
        ///</summary>
        [TestMethod()]
        public void NominalFrequencyTest()
        {
            GSF.PhasorProtocols.LineFrequency expected = new GSF.PhasorProtocols.LineFrequency();
            GSF.PhasorProtocols.LineFrequency actual;
            target.NominalFrequency = expected;
            actual = target.NominalFrequency;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for ProcessDataValidFlag
        ///</summary>
        [TestMethod()]
        public void ProcessDataValidFlagTest()
        {
            bool expected = false;
            bool actual;
            target.ProcessDataValidFlag = expected;
            actual = target.ProcessDataValidFlag;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for Status
        ///</summary>
        [TestMethod()]
        public void StatusTest()
        {
            string actual;
            actual = target.Status;
        }

        /// <summary>
        ///A test for SupportsTemporalProcessing
        ///</summary>
        [TestMethod()]
        public void SupportsTemporalProcessingTest()
        {
            bool actual;
            actual = target.SupportsTemporalProcessing;
        }

        /// <summary>
        ///A test for VoltageScalingValue
        ///</summary>
        [TestMethod()]
        public void VoltageScalingValueTest()
        {
            uint expected = 0;
            uint actual;
            target.VoltageScalingValue = expected;
            actual = target.VoltageScalingValue;
            Assert.AreEqual(expected, actual);
        }
        #endregion
    }
}
