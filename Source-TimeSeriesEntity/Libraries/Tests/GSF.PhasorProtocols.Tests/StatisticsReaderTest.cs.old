#region [ Modification History ]
/*
 * 11/12/2012 Denis Kholine
 *  Generated Original version of source code.
 */
#endregion
 // TODO: Initialize to an appropriate value
#region  [ UIUC NCSA Open Source License ]
/*
Copyright © <2012> <University of Illinois>
All rights reserved.

Developed by: <ITI>
<University of Illinois>
<http://www.iti.illinois.edu/>
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
• Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.
• Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.
• Neither the names of <Name of Development Group, Name of Institution>, nor the names of its contributors may be used to endorse or promote products derived from this Software without specific prior written permission.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
*/
#endregion

#region [ Using ]
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GSF.TestsSuite.PhasorProtocols.Wrappers.IEEE.C37118;
using GSF.TestsSuite.PhasorProtocols.Wrappers;
using System.Runtime.Serialization;
using GSF.PhasorProtocols.IEEEC37_118;
using GSF.PhasorProtocols;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Reflection;
using System.IO;
using GSF.TimeSeries.Statistics;
#endregion

//TODO: Configuration file required for complete testing results.
// See /Dependencies/Config folder.
namespace GSF.PhasorProtocols.Tests
{
    /// <summary>
    ///This is a test class for StatisticsReaderTest and is intended
    ///to contain all StatisticsReaderTest Unit Tests
    ///</summary>
    [TestClass()]
    public class StatisticsReaderTest
    {
        #region [ Members ]
        /// <summary>
        /// Path to configuration file
        /// </summary>
        private string openPdcConfigPath;
        /// <summary>
        /// Testing target
        /// </summary>
        private StatisticsReader target;
        #endregion

        #region [ Context ]
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #endregion

        #region [ Additional test attributes ]
        //
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}

        //Use TestInitialize to run code before running each test
        [TestInitialize()]
        public void MyTestInitialize()
        {
            target = new StatisticsReader();
        }

        //Use TestCleanup to run code after each test has run
        [TestCleanup()]
        public void MyTestCleanup()
        {
        }
        #endregion

        #region [ Members ]
        /// <summary>
        ///A test for StatisticsReader Constructor
        ///</summary>
        [TestMethod()]
        public void StatisticsReaderConstructorTest()
        {
            GSF.PhasorProtocols.StatisticsReader target = new GSF.PhasorProtocols.StatisticsReader();
            Assert.IsInstanceOfType(target, typeof(StatisticsReader));
            Assert.IsNotNull(target);
        }

        /// <summary>
        ///A test for StatisticsReader Constructor
        ///</summary>
        [TestMethod()]
        public void StatisticsReaderConstructorTest1()
        {
            string openPdcConfigPath = string.Empty;
            GSF.PhasorProtocols.StatisticsReader target = new GSF.PhasorProtocols.StatisticsReader(openPdcConfigPath);
            Assert.IsInstanceOfType(target, typeof(StatisticsReader));
            Assert.IsNotNull(target);
        }

        /// <summary>
        ///A test for Close
        ///</summary>
        [TestMethod()]
        public void CloseTest()
        {
            try
            {
                target.Close();
                Assert.IsTrue(true);
            }
            catch
            {
                Assert.IsTrue(false);
            }
        }

        /// <summary>
        ///A test for Open
        ///</summary>
        [TestMethod()]
        public void OpenTest()
        {
            try
            {
                target.Open();
            }
            catch
            {
                Assert.IsTrue(false);
            }
        }

        /// <summary>
        ///A test for ActualDataRate
        ///</summary>
        [TestMethod()]
        public void ActualDataRateTest()
        {
            System.Collections.Generic.Dictionary<GSF.Historian.Files.MetadataRecord, System.Collections.Generic.IEnumerable<GSF.Historian.IDataPoint>> actual;
            actual = target.ActualDataRate;
            Assert.AreEqual(0, target.ActualDataRate.Count);
        }

        /// <summary>
        ///A test for ArchiveFilePath
        ///</summary>
        [TestMethod()]
        public void ArchiveFilePathTest()
        {
            string expected = string.Empty;
            string actual;
            target.ArchiveFilePath = expected;
            actual = target.ArchiveFilePath;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for AverageLatency
        ///</summary>
        [TestMethod()]
        public void AverageLatencyTest()
        {
            System.Collections.Generic.Dictionary<GSF.Historian.Files.MetadataRecord, System.Collections.Generic.IEnumerable<GSF.Historian.IDataPoint>> actual;
            actual = target.AverageLatency;
            Assert.AreEqual(0, target.AverageLatency.Count);
        }

        /// <summary>
        ///A test for ConnectedStats
        ///</summary>
        [TestMethod()]
        public void ConnectedStatsTest()
        {
            System.Collections.Generic.Dictionary<GSF.Historian.Files.MetadataRecord, System.Collections.Generic.IEnumerable<GSF.Historian.IDataPoint>> actual;
            actual = target.ConnectedStats;
            Assert.AreEqual(0, target.ConnectedStats.Count);
        }

        /// <summary>
        ///A test for DataQualityErrors
        ///</summary>
        [TestMethod()]
        public void DataQualityErrorsTest()
        {
            System.Collections.Generic.Dictionary<GSF.Historian.Files.MetadataRecord, System.Collections.Generic.IEnumerable<GSF.Historian.IDataPoint>> actual;
            actual = target.DataQualityErrors;
            Assert.AreEqual(0, target.DataQualityErrors.Count);
        }

        /// <summary>
        ///A test for EndTime
        ///</summary>
        [TestMethod()]
        public void EndTimeTest()
        {
            System.DateTime expected = new System.DateTime();
            System.DateTime actual;
            target.EndTime = expected;
            actual = target.EndTime;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for IntercomFilePath
        ///</summary>
        [TestMethod()]
        public void IntercomFilePathTest()
        {
            string expected = string.Empty;
            string actual;
            target.IntercomFilePath = expected;
            actual = target.IntercomFilePath;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for MetadataFilePath
        ///</summary>
        [TestMethod()]
        public void MetadataFilePathTest()
        {
            string expected = string.Empty;
            string actual;
            target.MetadataFilePath = expected;
            actual = target.MetadataFilePath;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for MissingFrames
        ///</summary>
        [TestMethod()]
        public void MissingFramesTest()
        {
            System.Collections.Generic.Dictionary<GSF.Historian.Files.MetadataRecord, System.Collections.Generic.IEnumerable<GSF.Historian.IDataPoint>> actual;
            actual = target.MissingFrames;
            Assert.AreEqual(0, target.MissingFrames);
        }

        /// <summary>
        ///A test for StartTime
        ///</summary>
        [TestMethod()]
        public void StartTimeTest()
        {
            System.DateTime expected = new System.DateTime();
            System.DateTime actual;
            target.StartTime = expected;
            actual = target.StartTime;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for StateFilePath
        ///</summary>
        [TestMethod()]
        public void StateFilePathTest()
        {
            string expected = string.Empty;
            string actual;
            target.StateFilePath = expected;
            actual = target.StateFilePath;
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///A test for TimeQualityErrors
        ///</summary>
        [TestMethod()]
        public void TimeQualityErrorsTest()
        {
            System.Collections.Generic.Dictionary<GSF.Historian.Files.MetadataRecord, System.Collections.Generic.IEnumerable<GSF.Historian.IDataPoint>> actual;
            actual = target.TimeQualityErrors;
            Assert.AreEqual(0, target.TimeQualityErrors.Count);
        }

        /// <summary>
        ///A test for TotalFrames
        ///</summary>
        [TestMethod()]
        public void TotalFramesTest()
        {
            System.Collections.Generic.Dictionary<GSF.Historian.Files.MetadataRecord, System.Collections.Generic.IEnumerable<GSF.Historian.IDataPoint>> actual;
            actual = target.TotalFrames;
            Assert.AreEqual(0, target.TotalFrames.Count);
        }
        #endregion

    }
}
