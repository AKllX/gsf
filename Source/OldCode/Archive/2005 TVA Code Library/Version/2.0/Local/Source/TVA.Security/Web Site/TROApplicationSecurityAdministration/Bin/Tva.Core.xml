<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tva.Core
</name>
</assembly>
<members>
<member name="M:Tva.Identity.UserInfo.#ctor(System.String,System.String,System.Boolean)">
	<summary>Initializes a new instance of the user information class.</summary>
</member><member name="M:Tva.Identity.UserInfo.#ctor(System.String,System.Boolean)">
	<summary>Initializes a new instance of the user information class.</summary>
	<remarks>Specify login information as domain\username.</remarks>
</member><member name="P:Tva.Identity.UserInfo.UsePreviligedAccount">
	<summary>
 Gets or sets a boolean value indicating whether a previliged account will be used for retrieving
 information about the user from the Active Directory.
 </summary>
	<value></value>
	<returns>True if previliged account is to be used; otherwise False.</returns>
</member><member name="P:Tva.Identity.UserInfo.LoginID">
	<summary>Gets the login ID of the user.</summary>
</member><member name="P:Tva.Identity.UserInfo.UserEntry">
	<summary>Gets the System.DirectoryServices.DirectoryEntry of the user</summary>
</member><member name="P:Tva.Identity.UserInfo.UserProperty(System.String)">
	<summary>Returns adctive directory value for specified property</summary>
</member><member name="P:Tva.Identity.UserInfo.FullName">
	<summary>Gets the full name of the user</summary>
</member><member name="P:Tva.Identity.UserInfo.Email">
	<summary>Gets the e-mail address of the user</summary>
</member><member name="P:Tva.Identity.UserInfo.Telephone">
	<summary>Gets the telephone number of the user</summary>
</member><member name="P:Tva.Identity.UserInfo.Title">
	<summary>Gets the title of the user</summary>
</member><member name="P:Tva.Identity.UserInfo.Company">
	<summary>Gets the company of the user</summary>
</member><member name="P:Tva.Identity.UserInfo.Office">
	<summary>Returns the office location of the user</summary>
</member><member name="P:Tva.Identity.UserInfo.Department">
	<summary>Gets the department name where the user works</summary>
</member><member name="P:Tva.Identity.UserInfo.City">
	<summary>Gets the city where the user works</summary>
</member><member name="P:Tva.Identity.UserInfo.Mailbox">
	<summary>Returns the mailbox of where the user works</summary>
</member><member name="M:Tva.Identity.UserInfo.Authenticate(System.String)">
	<summary>
 Authenticates the user against Active Directory with the specified password.
 </summary>
	<param name="password">The password to be used for authentication.</param>
	<returns>True is the user can be authenticated; otherwise False.</returns>
</member><member name="P:Tva.Measurements.Frame.Measurements">
	<summary>Keyed measurements in this frame</summary>
</member><member name="P:Tva.Measurements.Frame.Published">
	<summary>Gets or sets published state of this frame</summary>
</member><member name="P:Tva.Measurements.Frame.This">
	<summary>Handy instance reference to self</summary>
</member><member name="P:Tva.Measurements.Frame.Ticks">
	<summary>Exact timestamp of the data represented in this frame</summary>
	<remarks>The value of this property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001</remarks>
</member><member name="P:Tva.Measurements.Frame.Timestamp">
	<summary>Date representation of ticks of this frame</summary>
</member><member name="M:Tva.Measurements.Frame.CompareTo(System.Object)">
	<summary>This implementation of a basic frame compares itself by timestamp</summary>
</member><member name="T:Tva.Measurements.Frame">
	<summary>Implementation of a basic frame</summary>
</member><member name="P:Tva.Measurements.Sample.This">
	<summary>Handy instance reference to self</summary>
</member><member name="P:Tva.Measurements.Sample.Frames">
	<summary>Array of frames in this sample</summary>
</member><member name="P:Tva.Measurements.Sample.Published">
	<summary>Gets published state of this sample (i.e., all frames published)</summary>
</member><member name="P:Tva.Measurements.Sample.Ticks">
	<summary>Exact timestamp of the beginning of data sample</summary>
	<remarks>The value of this property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001</remarks>
</member><member name="P:Tva.Measurements.Sample.Timestamp">
	<summary>Date representation of ticks of data sample</summary>
</member><member name="M:Tva.Measurements.Sample.CompareTo(System.Object)">
	<summary>Samples are sorted by timestamp</summary>
</member><member name="T:Tva.Measurements.Sample">
	<summary>This class represents a collection of frames over one second (i.e., a sample of data)</summary>
</member><member name="M:Tva.Math.Common.NotZero(System.Double)">
	<summary>Ensures parameter passed to function is not zero - returns -1 if <paramref name="testValue">testValue</paramref> is zero</summary>
	<param name="testValue">Value to test for zero</param>
	<returns>A non-zero value</returns>
</member><member name="M:Tva.Math.Common.NotZero(System.Double,System.Double)">
	<summary>Ensures parameter passed to function is not zero</summary>
	<param name="testValue">Value to test for zero</param>
	<param name="nonZeroReturnValue">Value to return if <paramref name="testValue">testValue</paramref> is zero</param>
	<returns>A non-zero value</returns>
	<remarks>To optimize performance this function does not validate that the notZeroReturnValue is not zero</remarks>
</member><member name="M:Tva.Math.Common.NotEqualTo``1(``0,``0,``0)">
	<summary>Ensures test parameter passed to function is not equal to the specified value</summary>
	<param name="testValue">Value to test</param>
	<param name="notEqualToValue">Value that represents the undesired value (e.g., zero)</param>
	<param name="alternateValue">Value to return if <paramref name="testValue">testValue</paramref> is equal to the undesired value</param>
	<typeparam name="T">Structure or class that implements IEquatable(Of T) (e.g., Double, Single, Integer, etc.)</typeparam>
	<returns>A value not equal to notEqualToValue</returns>
	<remarks>To optimize performance this function does not validate that the notEqualToValue is not equal to the alternateValue</remarks>
</member><member name="M:Tva.Math.Common.NotLessThan``1(``0,``0)">
	<summary>Ensures test parameter passed to function is not less than the specified value</summary>
	<param name="testValue">Value to test</param>
	<param name="notLessThanValue">Value that represents the lower limit for the testValue, this value is returned if testValue is less than notLessThanValue</param>
	<typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single, Integer, etc.)</typeparam>
	<returns>A value not less than notLessThanValue</returns>
	<remarks>If testValue is less than notLessThanValue then notLessThanValue is returned</remarks>
</member><member name="M:Tva.Math.Common.NotLessThan``1(``0,``0,``0)">
	<summary>Ensures test parameter passed to function is not less than the specified value</summary>
	<param name="testValue">Value to test</param>
	<param name="notLessThanValue">Value that represents the lower limit for the testValue</param>
	<param name="alternateValue">Value to return if <paramref name="testValue">testValue</paramref> is  &lt; <paramref name="notLessThanValue">notLessThanValue</paramref></param>
	<typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single, Integer, etc.)</typeparam>
	<returns>A value not less than notLessThanValue</returns>
	<remarks>To optimize performance this function does not validate that the notLessThanValue is not less than the alternateValue</remarks>
</member><member name="M:Tva.Math.Common.NotLessThanOrEqualTo``1(``0,``0,``0)">
	<summary>Ensures test parameter passed to function is not less than or equal to the specified value</summary>
	<param name="testValue">Value to test</param>
	<param name="notLessThanOrEqualToValue">Value that represents the lower limit for the testValue</param>
	<param name="alternateValue">Value to return if <paramref name="testValue">testValue</paramref> is &lt;= <paramref name="notLessThanOrEqualToValue">notLessThanOrEqualToValue</paramref></param>
	<typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single, Integer, etc.)</typeparam>
	<returns>A value not less than or equal to notLessThanOrEqualToValue</returns>
	<remarks>To optimize performance this function does not validate that the notLessThanOrEqualToValue is not less than or equal to the alternateValue</remarks>
</member><member name="M:Tva.Math.Common.NotGreaterThan``1(``0,``0)">
	<summary>Ensures test parameter passed to function is not greater than the specified value</summary>
	<param name="testValue">Value to test</param>
	<param name="notGreaterThanValue">Value that represents the upper limit for the testValue, this value is returned if testValue is greater than notGreaterThanValue</param>
	<typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single, Integer, etc.)</typeparam>
	<returns>A value not greater than notGreaterThanValue</returns>
	<remarks>If testValue is greater than notGreaterThanValue then notGreaterThanValue is returned</remarks>
</member><member name="M:Tva.Math.Common.NotGreaterThan``1(``0,``0,``0)">
	<summary>Ensures test parameter passed to function is not greater than the specified value</summary>
	<param name="testValue">Value to test</param>
	<param name="notGreaterThanValue">Value that represents the upper limit for the testValue</param>
	<param name="alternateValue">Value to return if <paramref name="testValue">testValue</paramref> is &gt; <paramref name="notGreaterThanValue">notGreaterThanValue</paramref></param>
	<typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single, Integer, etc.)</typeparam>
	<returns>A value not greater than notGreaterThanValue</returns>
	<remarks>To optimize performance this function does not validate that the notGreaterThanValue is not greater than the alternateValue</remarks>
</member><member name="M:Tva.Math.Common.NotGreaterThanOrEqualTo``1(``0,``0,``0)">
	<summary>Ensures test parameter passed to function is not greater than or equal to the specified value</summary>
	<param name="testValue">Value to test</param>
	<param name="notGreaterThanOrEqualToValue">Value that represents the upper limit for the testValue</param>
	<param name="alternateValue">Value to return if <paramref name="testValue">testValue</paramref> is &gt;= <paramref name="notGreaterThanOrEqualToValue">notGreaterThanOrEqualToValue</paramref></param>
	<typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single, Integer, etc.)</typeparam>
	<returns>A value not greater than or equal to notGreaterThanOrEqualToValue</returns>
	<remarks>To optimize performance this function does not validate that the notGreaterThanOrEqualToValue is not greater than or equal to the alternateValue</remarks>
</member><member name="M:Tva.Math.Common.Xor8BitCheckSum(System.Byte[],System.Int32,System.Int32)">
	<summary>Calculates byte length (8-bit) XOR based check-sum on specified portion of a buffer.</summary>
	<param name="data">Data buffer to perform XOR check-sum on</param>
	<param name="startIndex">Start index in data buffer to begin XOR check-sum</param>
	<param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to perform XOR check-sum over</param>
	<returns>Byte length XOR check-sum</returns>
</member><member name="M:Tva.Math.Common.Xor16BitCheckSum(System.Byte[],System.Int32,System.Int32)">
	<summary>Calculates word length (16-bit) XOR based check-sum on specified portion of a buffer.</summary>
	<param name="data">Data buffer to perform XOR check-sum on</param>
	<param name="startIndex">Start index in data buffer to begin XOR check-sum</param>
	<param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to perform XOR check-sum over</param>
	<returns>Word length XOR check-sum</returns>
</member><member name="M:Tva.Math.Common.Xor32BitCheckSum(System.Byte[],System.Int32,System.Int32)">
	<summary>Calculates double-word length (32-bit) XOR based check-sum on specified portion of a buffer.</summary>
	<param name="data">Data buffer to perform XOR check-sum on</param>
	<param name="startIndex">Start index in data buffer to begin XOR check-sum</param>
	<param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to perform XOR check-sum over</param>
	<returns>Double-word length XOR check-sum</returns>
</member><member name="M:Tva.Math.Common.Xor64BitCheckSum(System.Byte[],System.Int32,System.Int32)">
	<summary>Calculates quad-word length (64-bit) XOR based check-sum on specified portion of a buffer.</summary>
	<param name="data">Data buffer to perform XOR check-sum on</param>
	<param name="startIndex">Start index in data buffer to begin XOR check-sum</param>
	<param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to perform XOR check-sum over</param>
	<returns>Quad-word length XOR check-sum</returns>
</member><member name="P:Tva.Math.Common.RandomNumber">
	<summary>Generates a cryptographically strong floating-point random number between zero and one</summary>
</member><member name="P:Tva.Math.Common.RandomBetween(System.Double,System.Double)">
	<summary>Generates a cryptographically strong random integer between specified values</summary>
</member><member name="P:Tva.Math.Common.RandomBoolean">
	<summary>Generates a cryptographically strong random boolean (i.e., a coin toss).</summary>
</member><member name="P:Tva.Math.Common.RandomByte">
	<summary>Generates a cryptographically strong 8-bit random integer</summary>
</member><member name="P:Tva.Math.Common.RandomByteBetween(System.Byte,System.Byte)">
	<summary>Generates a cryptographically strong 8-bit random integer between specified values</summary>
</member><member name="P:Tva.Math.Common.RandomInt16">
	<summary>Generates a cryptographically strong 16-bit random integer</summary>
</member><member name="P:Tva.Math.Common.RandomInt16Between(System.Int16,System.Int16)">
	<summary>Generates a cryptographically strong 16-bit random integer between specified values</summary>
</member><member name="P:Tva.Math.Common.RandomInt32">
	<summary>Generates a cryptographically strong 32-bit random integer</summary>
</member><member name="P:Tva.Math.Common.RandomInt32Between(System.Int32,System.Int32)">
	<summary>Generates a cryptographically strong 32-bit random integer between specified values</summary>
</member><member name="P:Tva.Math.Common.RandomInt64">
	<summary>Generates a cryptographically strong 64-bit random integer</summary>
</member><member name="P:Tva.Math.Common.RandomInt64Between(System.Int64,System.Int64)">
	<summary>Generates a cryptographically strong 64-bit random integer between specified values</summary>
</member><member name="M:Tva.Math.Common.CurveFit(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
	<summary>Linear regression algorithm</summary>
</member><member name="T:Tva.Math.Common">
	<summary>Defines common math functions</summary>
</member><member name="M:Tva.Math.RealTimeSlope.#ctor(System.Int32,System.Double)">
	<summary>Creates a new instance of the real-time slope calculation class</summary>
	<param name="regressionInterval">Time span over which to calculate slope</param>
	<param name="estimatedRefreshInterval">Estimated data points per second</param>
</member><member name="M:Tva.Math.RealTimeSlope.Calculate(System.Double,System.Double)">
	<summary>Adds a new x, y data pair to continuous data set</summary>
	<param name="x">New x-axis value</param>
	<param name="y">New y-axis value</param>
</member><member name="P:Tva.Math.RealTimeSlope.Slope">
	<summary>Current calculated slope for data set</summary>
</member><member name="P:Tva.Math.RealTimeSlope.RunTime">
	<summary>Run-time, in seconds, for which slope has maintained a continuous positive or negative trend</summary>
</member><member name="T:Tva.Math.RealTimeSlope">
	<summary>Calculates slope for a real-time continuous data stream</summary>
</member><member name="P:Tva.Measurements.IFrame.This">
	<summary>Handy instance reference to self</summary>
</member><member name="P:Tva.Measurements.IFrame.Measurements">
	<summary>Keyed measurements in this frame</summary>
	<remarks>Represents a dictionary of measurements, keyed by an integer ID</remarks>
</member><member name="P:Tva.Measurements.IFrame.Published">
	<summary>Gets or sets published state of this frame</summary>
</member><member name="P:Tva.Measurements.IFrame.Ticks">
	<summary>Exact timestamp of the data represented in this frame</summary>
	<remarks>The value of this property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001</remarks>
</member><member name="P:Tva.Measurements.IFrame.Timestamp">
	<summary>Date representation of ticks of this frame</summary>
</member><member name="M:Tva.Net.Smtp.Common.SendMail(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
	<summary>Creates a mail message from the specified information and sends it to an SMTP server for delivery.</summary>
	<param name="from">The address of the mail message sender.</param>
	<param name="toRecipients">A comma-seperated address list of the mail message recipients.</param>
	<param name="subject">The subject of the mail message.</param>
	<param name="body">The body of the mail message.</param>
	<param name="isBodyHtml">A boolean value indicating whether the mail message body is in Html.</param>
	<param name="smtpServer">The name or IP address of the SMTP server. Pass null or Nothing to use the default SMTP server.</param>
</member><member name="M:Tva.Net.Smtp.Common.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
	<summary>Creates a mail message from the specified information and sends it to an SMTP server for delivery.</summary>
	<param name="from">The address of the mail message sender.</param>
	<param name="toRecipients">A comma-seperated address list of the mail message recipients.</param>
	<param name="ccRecipients">A comma-seperated address list of the mail message carbon copy (CC) recipients.</param>
	<param name="bccRecipients">A comma-seperated address list of the mail message blank carbon copy (BCC) recipients.</param>
	<param name="subject">The subject of the mail message.</param>
	<param name="body">The body of the mail message.</param>
	<param name="isBodyHtml">A boolean value indicating whether the mail message body is in Html.</param>
	<param name="smtpServer">The name or IP address of the SMTP server. Pass null or Nothing to use the default SMTP server.</param>
</member><member name="M:Tva.Net.Smtp.Common.SendMail(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
	<summary>Creates a mail message from the specified information and sends it to an SMTP server for delivery.</summary>
	<param name="from">The address of the mail message sender.</param>
	<param name="toRecipients">A comma-seperated address list of the mail message recipients.</param>
	<param name="subject">The subject of the mail message.</param>
	<param name="body">The body of the mail message.</param>
	<param name="isBodyHtml">A boolean value indicating whether the mail message body is in Html.</param>
	<param name="attachments">A comma-seperated list of file names to be attached to the mail message.</param>
	<param name="smtpServer">The name or IP address of the SMTP server. Pass null or Nothing to use the default SMTP server.</param>
</member><member name="M:Tva.Net.Smtp.Common.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
	<summary>Creates a mail message from the specified information and sends it to an SMTP server for delivery.</summary>
	<param name="from">The address of the mail message sender.</param>
	<param name="toRecipients">A comma-seperated address list of the mail message recipients.</param>
	<param name="ccRecipients">A comma-seperated address list of the mail message carbon copy (CC) recipients.</param>
	<param name="bccRecipients">A comma-seperated address list of the mail message blank carbon copy (BCC) recipients.</param>
	<param name="subject">The subject of the mail message.</param>
	<param name="body">The body of the mail message.</param>
	<param name="isBodyHtml">A boolean value indicating whether the mail message body is in Html.</param>
	<param name="attachments">A comma-seperated list of file names to be attached to the mail message.</param>
	<param name="smtpServer">The name or IP address of the SMTP server. Pass null or Nothing to use the default SMTP server.</param>
</member><member name="T:Tva.Net.Smtp.Common">
	<summary>Defines common e-mail related functions.</summary>
</member><member name="M:Tva.Common.IIf``1(System.Boolean,``0,``0)">
	<summary>Strongly typed immediate (a.k.a. inline) if.</summary>
	<returns>One of two objects, depending on the evaluation of given expression.</returns>
	<param name="expression">The expression you want to evaluate.</param>
	<param name="truePart">Returned if expression evaluates to True.</param>
	<param name="falsePart">Returned if expression evaluates to False.</param>
	<typeparam name="T">Return type used for immediate expression</typeparam>
</member><member name="M:Tva.Common.CreateArray``1(System.Int32)">
	<summary>Strongly typed Array creation function.</summary>
	<returns>New array of specified type.</returns>
	<param name="length">Desired length of new array.</param>
	<typeparam name="T">Return type for new array.</typeparam>
	<remarks>
		<para>
 The Array.CreateInstance provides better performance and more direct CLR access for array creation (not to mention less
 confusion on the matter of array lengths), however the returned System.Array is not typed properly.  This function
 properly casts the return array based on the the type specification helping when Option Strict is enabled.
 </para>
		<para>
 Examples:
 <code>
     Dim buffer As Byte() = CreateArray(Of Byte)(12)
     Dim matrix As Integer()() = CreateArray(Of Integer())(10)
 </code>
		</para>
	</remarks>
</member><member name="T:Tva.Common">
	<summary>Defines common global functions</summary>
</member><member name="T:Tva.Interop.Endianness">
	<summary>Endian Byte Order Enumeration</summary>
</member><member name="T:Tva.Interop.EndianOrder">
	<summary>Endian byte order interoperability class</summary>
	<remarks>
 Intel systems use little-endian byte order, other systems, such as Unix, use big-endian byte ordering.
 Little-endian ordering means bits are ordered such that the bit whose in-memory representation is right-most is the most-significant-bit in a byte.
 Big-endian ordering means bits are ordered such that the bit whose in-memory representation is left-most is the most-significant-bit in a byte.
 </remarks>
</member><member name="M:Tva.DateTime.UnixTimeTag.#ctor(System.Double)">
	<summary>Creates new Unix timetag given number of seconds since 1/1/1900</summary>
	<param name="seconds">Number of seconds since 1/1/1970</param>
</member><member name="M:Tva.DateTime.UnixTimeTag.#ctor(System.DateTime)">
	<summary>Creates new Unix timetag given standard .NET DateTime</summary>
	<param name="timestamp">.NET DateTime to create Unix timetag from (minimum valid date is 1/1/1970)</param>
</member><member name="T:Tva.DateTime.UnixTimeTag">
	<summary>Standard Unix Timetag</summary>
</member><member name="M:Tva.Interop.WindowsApi.GetErrorMessage(System.Int32)">
	<summary>Formats and returns a .NET string containing the Windows API level error message corresponding to the specified error code</summary>
</member><member name="T:Tva.Interop.WindowsApi">
	<summary>Defines common Windows API functions</summary>
</member><member name="M:Tva.ByteEncoding.HexadecimalEncoding.GetBytes(System.String,System.Char)">
	<summary>Decodes given string back into a byte buffer</summary>
	<param name="hexData">Encoded hexadecimal data string to decode</param>
	<param name="spacingCharacter">Original spacing character that was inserted between encoded bytes</param>
	<returns>Decoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.HexadecimalEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
	<summary>Encodes given buffer into a user presentable representation</summary>
	<param name="bytes">Bytes to encode</param>
	<param name="offset">Offset into buffer to bgeing encoding</param>
	<param name="length">Length of buffer to encode</param>
	<param name="spacingCharacter">Spacing character to place between encoded bytes</param>
	<returns>String of encoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.DecimalEncoding.GetBytes(System.String,System.Char)">
	<summary>Decodes given string back into a byte buffer</summary>
	<param name="decData">Encoded decimal data string to decode</param>
	<param name="spacingCharacter">Original spacing character that was inserted between encoded bytes</param>
	<returns>Decoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.DecimalEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
	<summary>Encodes given buffer into a user presentable representation</summary>
	<param name="bytes">Bytes to encode</param>
	<param name="offset">Offset into buffer to bgeing encoding</param>
	<param name="length">Length of buffer to encode</param>
	<param name="spacingCharacter">Spacing character to place between encoded bytes</param>
	<returns>String of encoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.BinaryEncoding.GetBytes(System.String,System.Char)">
	<summary>Decodes given string back into a byte buffer</summary>
	<param name="binaryData">Encoded binary data string to decode</param>
	<param name="spacingCharacter">Original spacing character that was inserted between encoded bytes</param>
	<returns>Decoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.BinaryEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
	<summary>Encodes given buffer into a user presentable representation</summary>
	<param name="bytes">Bytes to encode</param>
	<param name="offset">Offset into buffer to bgeing encoding</param>
	<param name="length">Length of buffer to encode</param>
	<param name="spacingCharacter">Spacing character to place between encoded bytes</param>
	<returns>String of encoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.Base64Encoding.GetBytes(System.String,System.Char)">
	<summary>Decodes given string back into a byte buffer</summary>
	<param name="binaryData">Encoded binary data string to decode</param>
	<param name="spacingCharacter">Original spacing character that was inserted between encoded bytes</param>
	<returns>Decoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.Base64Encoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
	<summary>Encodes given buffer into a user presentable representation</summary>
	<param name="bytes">Bytes to encode</param>
	<param name="offset">Offset into buffer to bgeing encoding</param>
	<param name="length">Length of buffer to encode</param>
	<param name="spacingCharacter">Spacing character to place between encoded bytes</param>
	<returns>String of encoded bytes</returns>
</member><member name="P:Tva.ByteEncoding.Hexadecimal">
	<summary>Handles encoding and decoding of a byte buffer into a hexadecimal based presentation format</summary>
</member><member name="P:Tva.ByteEncoding.Decimal">
	<summary>Handles encoding and decoding of a byte buffer into an integer based presentation format</summary>
</member><member name="P:Tva.ByteEncoding.BigEndianBinary">
	<summary>Handles encoding and decoding of a byte buffer into a big-endian binary (i.e., 0 and 1's) based presentation format</summary>
</member><member name="P:Tva.ByteEncoding.LittleEndianBinary">
	<summary>Handles encoding and decoding of a byte buffer into a little-endian binary (i.e., 0 and 1's) based presentation format</summary>
</member><member name="P:Tva.ByteEncoding.Base64">
	<summary>Handles encoding and decoding of a byte buffer into a base64 presentation format</summary>
</member><member name="M:Tva.ByteEncoding.GetString(System.Byte[])">
	<summary>Encodes given buffer into a user presentable representation</summary>
	<param name="bytes">Bytes to encode</param>
</member><member name="M:Tva.ByteEncoding.GetString(System.Byte[],System.Char)">
	<summary>Encodes given buffer into a user presentable representation</summary>
	<param name="bytes">Bytes to encode</param>
	<param name="spacingCharacter">Spacing character to place between encoded bytes</param>
	<returns>String of encoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
	<summary>Encodes given buffer into a user presentable representation</summary>
	<param name="bytes">Bytes to encode</param>
	<param name="offset">Offset into buffer to bgeing encoding</param>
	<param name="length">Length of buffer to encode</param>
	<returns>String of encoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
	<summary>Encodes given buffer into a user presentable representation</summary>
	<param name="bytes">Bytes to encode</param>
	<param name="offset">Offset into buffer to bgeing encoding</param>
	<param name="length">Length of buffer to encode</param>
	<param name="spacingCharacter">Spacing character to place between encoded bytes</param>
	<returns>String of encoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.GetBytes(System.String)">
	<summary>Decodes given string back into a byte buffer</summary>
	<param name="value">Encoded string to decode</param>
	<returns>Decoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.GetBytes(System.String,System.Char)">
	<summary>Decodes given string back into a byte buffer</summary>
	<param name="value">Encoded string to decode</param>
	<param name="spacingCharacter">Original spacing character that was inserted between encoded bytes</param>
	<returns>Decoded bytes</returns>
</member><member name="M:Tva.ByteEncoding.BytesToString(System.Byte[],System.Int32,System.Int32,System.Char,System.String)">
	<summary>Handles byte to string conversions for implementations that are available from Byte.ToString</summary>
</member><member name="T:Tva.ByteEncoding">
	<summary>Handles conversion of a byte buffers to and from user presentable data formats</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.String)">
	<summary>Returns a Base64 encoded string of the returned binary array of the encrypted data generated with the given parameter using the standard encryption key and encryption level 1</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.String,Tva.Security.Cryptography.EncryptLevel)">
	<summary>Returns a Base64 encoded string of the returned binary array of the encrypted data generated with the given parameters using standard encryption</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.String,System.String,Tva.Security.Cryptography.EncryptLevel)">
	<summary>Returns a Base64 encoded string of the returned binary array of the encrypted data generated with the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.Byte[],System.Byte[],System.Byte[],Tva.Security.Cryptography.EncryptLevel)">
	<summary>Returns a binary array of encrypted data for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Byte[],System.Byte[])">
	<summary>Returns a binary array of encrypted data for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.IO.Stream,System.Byte[],System.Byte[],Tva.Security.Cryptography.EncryptLevel)">
	<summary>Returns a stream of encrypted data for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.Byte[],System.Byte[])">
	<summary>Returns a stream of encrypted data for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[],Tva.Security.Cryptography.EncryptLevel,Tva.Security.Cryptography.Common.ProgressEventHandler)">
	<summary>Encrypts input stream onto output stream for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
	<summary>Encrypts input stream onto output stream for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.EncryptFile(System.String,System.String,Tva.Security.Cryptography.EncryptLevel)">
	<summary>Creates an encrypted file from source file data</summary>
</member><member name="M:Tva.Security.Cryptography.Common.EncryptFile(System.String,System.String,System.String,Tva.Security.Cryptography.EncryptLevel,Tva.Security.Cryptography.Common.ProgressEventHandler)">
	<summary>Creates an encrypted file from source file data</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.String)">
	<summary>Returns a decrypted string from a Base64 encoded string of binary encrypted data from the given parameter using the standard encryption key and encryption level 1</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.String,Tva.Security.Cryptography.EncryptLevel)">
	<summary>Returns a decrypted string from a Base64 encoded string of binary encrypted data from the given parameters using the standard encryption key</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.String,System.String,Tva.Security.Cryptography.EncryptLevel)">
	<summary>Returns a decrypted string from a Base64 encoded string of binary encrypted data from the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.Byte[],System.Byte[],System.Byte[],Tva.Security.Cryptography.EncryptLevel)">
	<summary>Returns a binary array of decrypted data for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Byte[],System.Byte[])">
	<summary>Returns a binary array of decrypted data for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.IO.Stream,System.Byte[],System.Byte[],Tva.Security.Cryptography.EncryptLevel)">
	<summary>Returns a stream of decrypted data for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.Byte[],System.Byte[])">
	<summary>Returns a stream of decrypted data for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[],Tva.Security.Cryptography.EncryptLevel,Tva.Security.Cryptography.Common.ProgressEventHandler)">
	<summary>Decrypts input stream onto output stream for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
	<summary>Decrypts input stream onto output stream for the given parameters</summary>
</member><member name="M:Tva.Security.Cryptography.Common.DecryptFile(System.String,System.String,Tva.Security.Cryptography.EncryptLevel)">
	<summary>Creates a decrypted file from source file data</summary>
</member><member name="M:Tva.Security.Cryptography.Common.DecryptFile(System.String,System.String,System.String,Tva.Security.Cryptography.EncryptLevel,Tva.Security.Cryptography.Common.ProgressEventHandler)">
	<summary>Creates a decrypted file from source file data</summary>
</member><member name="M:Tva.Security.Cryptography.Common.GetLegalKey(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
	<summary>Coerces key to maximum legal bit length for given encryption algorithm</summary>
</member><member name="M:Tva.Security.Cryptography.Common.GetLegalIV(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
	<summary>Coerces initialization vector to legal block size for given encryption algorithm</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Crypt(System.IO.Stream,System.Byte[])">
	<summary>Encrypts or decrypts input stream onto output stream using XOR based algorithms.  Call once to encrypt, call again with same key to decrypt.</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Crypt(System.String,System.String)">
	<summary>Encrypts or decrypts a string using XOR based algorithms.  Call once to encrypt, call again with same key to decrypt.</summary>
</member><member name="M:Tva.Security.Cryptography.Common.Crypt(System.Byte[],System.Byte[])">
	<summary>Encrypts or decrypts data using XOR based algorithms.  Call once to encrypt, call again with same key to decrypt.</summary>
</member><member name="M:Tva.Security.Cryptography.Common.GenerateKey">
	<summary>Generates a random key useful for cryptographic functions</summary>
</member><member name="M:Tva.Security.Cryptography.Common.GetKeyFromSeed(System.Int32)">
	<summary>Returns a coded string representing a number which can later be decoded with <see cref="M:Tva.Security.Cryptography.Common.GetSeedFromKey(System.String)"/>.</summary>
	<remarks>
		<para>This function was designed for Microsoft.VisualBasic.Timer values.</para>
	</remarks>
</member><member name="M:Tva.Security.Cryptography.Common.GetSeedFromKey(System.String)">
	<summary>Returns the number from a string coded with <see cref="M:Tva.Security.Cryptography.Common.GetKeyFromSeed(System.Int32)"/>.</summary>
</member><member name="T:Tva.Security.Cryptography.Common">
	<summary>Common Cryptographic Functions</summary>
</member><member name="M:Tva.Configuration.CategorizedSettingsElement.#ctor">
	<summary>
 This constructor is required by the configuration API and is for internal use only.
 </summary>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsElement.#ctor(System.String)">
	<summary>
 This constructor is required by the configuration API and is for internal use only.
 </summary>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsElement.#ctor(System.String,System.String)">
	<summary>
 Initializes a new instance of Tva.Configuration.CategorizedSettingsElement with the specified
 name and value information.
 </summary>
	<param name="name">The identifier string of the element.</param>
	<param name="value">The value string of the element.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsElement.#ctor(System.String,System.String,System.String)">
	<summary>
 Initializes a new instance of Tva.Configuration.CategorizedSettingsElement with the specified
 name and value information.
 </summary>
	<param name="name">The identifier string of the element.</param>
	<param name="value">The value string of the element.</param>
	<param name="description">The description string of the element.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsElement.#ctor(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Initializes a new instance of Tva.Configuration.CategorizedSettingsElement with the specified
 name and value information.
 </summary>
	<param name="name">The identifier string of the element.</param>
	<param name="value">The value string of the element.</param>
	<param name="description">The description string of the element.</param>
	<param name="encrypted">True if the value string of the element is to be encrypted; otherwise False.</param>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.CategorizedSettingsElement.Name">
	<summary>
 Gets or sets the identifier string of the element.
 </summary>
	<value></value>
	<returns>The identifier string of the element.</returns>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.CategorizedSettingsElement.Value">
	<summary>
 Gets or sets the value string of the element.
 </summary>
	<value></value>
	<returns>The value string of the element.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsElement.GetTypedValue``1(``0)">
	<summary>
 Gets the element value as the specified type.
 </summary>
	<typeparam name="T">Type to which the value string is to be converted.</typeparam>
	<param name="defaultValue">The default value to return if the value string is empty.</param>
	<returns>The type-coerced value of the referenced setting</returns>
	<remarks>If this function fails to properly coerce value to specified type, default value is returned</remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsElement.GetTypedValue(System.Boolean)">
	<summary>
 Gets the element value as a boolean.
 </summary>
	<param name="defaultValue">The default value to return if the value string is empty.</param>
	<returns>The parsed boolean value of the referenced setting</returns>
	<remarks>If this function fails to properly coerce value to a boolean, default value is returned</remarks>
</member><member name="P:Tva.Configuration.CategorizedSettingsElement.Description">
	<summary>
 Gets or sets the description string of the element.
 </summary>
	<value></value>
	<returns>The description string of the element.</returns>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.CategorizedSettingsElement.Encrypted">
	<summary>
 Gets or sets a boolean indicating whether the value string of the element is to be encrypted.
 </summary>
	<value></value>
	<returns>True if the value string of the element is to be encrypted; otherwise False.</returns>
	<remarks></remarks>
</member><member name="T:Tva.Configuration.CategorizedSettingsElement">
	<summary>
 Represents a configuration element under the categories of categorizedSettings section within 
 a configuration file.
 </summary>
	<remarks></remarks>
</member><member name="F:Tva.Data.Common.TimeoutDuration">
	<summary>
 The default timeout duration used for executing SQL statements when timeout duration is not specified.
 </summary>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.SqlEncode(System.String)">
	<summary>
 Performs SQL encoding on given T-SQL string.
 </summary>
	<param name="sql">The string on which SQL encoding is to be performed.</param>
	<returns>The SQL encoded string.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.String,Tva.Data.ConnectionType,System.Int32)">
	<summary>
 Executes the SQL statement and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connectString">The connection string used for connecting to the data source.</param>
	<param name="connectionType">The type of data provider to use for connecting to the data source and executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.OleDb.OleDbConnection)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.OleDb.OleDbConnection,System.Int32)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.OleDb.OleDbConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.OleDb.OleDbConnection,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlConnection,System.Int32)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlConnection,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.OracleClient.OracleConnection)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteNonQuery(System.String,System.Data.OracleClient.OracleConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the number of rows affected.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The number of rows affected.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.OleDb.OleDbConnection)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.OleDb.OleDbDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.OleDb.OleDbConnection,System.Data.CommandBehavior,System.Int32)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="behavior">One of the System.Data.CommandBehavior values.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>An System.Data.OleDb.OleDbDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.OleDb.OleDbConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.OleDb.OleDbDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.OleDb.OleDbConnection,System.Data.CommandBehavior,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="behavior">One of the System.Data.CommandBehavior values.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.OleDb.OleDbDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.SqlClient.SqlDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.SqlClient.SqlConnection,System.Data.CommandBehavior,System.Int32)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="behavior">One of the System.Data.CommandBehavior values.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>An System.Data.SqlClient.SqlDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.SqlClient.SqlConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.SqlClient.SqlDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.SqlClient.SqlConnection,System.Data.CommandBehavior,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="behavior">One of the System.Data.CommandBehavior values.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.SqlClient.SqlDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.OracleClient.OracleConnection)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.OracleClient.OracleDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.OracleClient.OracleConnection,System.Data.CommandBehavior)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="behavior">One of the System.Data.CommandBehavior values.</param>
	<returns>An System.Data.OracleClient.OracleDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.OracleClient.OracleConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.OracleClient.OracleDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteReader(System.String,System.Data.OracleClient.OracleConnection,System.Data.CommandBehavior,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and builds a data reader.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="behavior">One of the System.Data.CommandBehavior values.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.OracleClient.OracleDataReader object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.OleDb.OleDbConnection)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.OleDb.OleDbConnection,System.Int32)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.OleDb.OleDbConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.OleDb.OleDbConnection,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.SqlClient.SqlConnection,System.Int32)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.SqlClient.SqlConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.SqlClient.SqlConnection,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.OracleClient.OracleConnection)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.ExecuteScalar(System.String,System.Data.OracleClient.OracleConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the first column of the 
 first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first column of the first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.OleDb.OleDbConnection)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.OleDb.OleDbConnection,System.Int32)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.OleDb.OleDbConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.OleDb.OleDbConnection,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.SqlClient.SqlConnection,System.Int32)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.SqlClient.SqlConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.SqlClient.SqlConnection,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.OracleClient.OracleConnection)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveRow(System.String,System.Data.OracleClient.OracleConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the first row in the resultset.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>The first row in the resultset.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.OleDb.OleDbConnection)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.OleDb.OleDbConnection,System.Int32,System.Int32,System.Int32)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.OleDb.OleDbConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.OleDb.OleDbConnection,System.Int32,System.Int32,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.SqlClient.SqlConnection,System.Int32,System.Int32,System.Int32)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.SqlClient.SqlConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.SqlClient.SqlConnection,System.Int32,System.Int32,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.OracleClient.OracleConnection)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.OracleClient.OracleConnection,System.Int32,System.Int32)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.OracleClient.OracleConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveData(System.String,System.Data.OracleClient.OracleConnection,System.Int32,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the first table of resultset 
 if the resultset contains multiple tables.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.OleDb.OleDbConnection)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the resultset that may contain
 multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.OleDb.OleDbConnection,System.Int32,System.Int32,System.Int32)">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the resultset that may contain
 multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.OleDb.OleDbConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the resultset that may contain
 multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.OleDb.OleDbConnection,System.Int32,System.Int32,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net OleDb data provider, and returns the resultset that may contain
 multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the resultset that may 
 contain multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.SqlClient.SqlConnection,System.Int32,System.Int32,System.Int32)">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the resultset that may 
 contain multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.SqlClient.SqlConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the resultset that may 
 contain multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.SqlClient.SqlConnection,System.Int32,System.Int32,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Sql Server data provider, and returns the resultset that may 
 contain multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.OracleClient.OracleConnection)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the resultset that may 
 contain multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.OracleClient.OracleConnection,System.Int32,System.Int32)">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the resultset that may 
 contain multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.OracleClient.OracleConnection,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the resultset that may 
 contain multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.RetrieveDataSet(System.String,System.Data.OracleClient.OracleConnection,System.Int32,System.Int32,System.Object[])">
	<summary>
 Executes the SQL statement using .Net Oracle data provider, and returns the resultset that may 
 contain multiple table depending on the SQL statement.
 </summary>
	<param name="sql">The SQL statement to be executed.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for executing the SQL statement.</param>
	<param name="startRow">The zero-based record number to start with.</param>
	<param name="maxRows">The maximum number of records to retrieve.</param>
	<param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
	<returns>An System.Data.DataSet object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.UpdateData(System.Data.DataTable,System.String,System.Data.OleDb.OleDbConnection)">
	<summary>
 Updates the underlying data of the System.Data.DataTable using .Net OleDb data provider, and 
 returns the number of rows successfully updated.
 </summary>
	<param name="sourceData">The System.Data.DataTable used to update the underlying data source.</param>
	<param name="sourceSql">The SQL statement used initially to populate the System.Data.DataTable.</param>
	<param name="connection">The System.Data.OleDb.OleDbConnection to use for updating the underlying data source.</param>
	<returns>The number of rows successfully updated from the System.Data.DataTable.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.UpdateData(System.Data.DataTable,System.String,System.Data.SqlClient.SqlConnection)">
	<summary>
 Updates the underlying data of the System.Data.DataTable using .Net Sql Server data provider, and 
 returns the number of rows successfully updated.
 </summary>
	<param name="sourceData">The System.Data.DataTable used to update the underlying data source.</param>
	<param name="sourceSql">The SQL statement used initially to populate the System.Data.DataTable.</param>
	<param name="connection">The System.Data.SqlClient.SqlConnection to use for updating the underlying data source.</param>
	<returns>The number of rows successfully updated from the System.Data.DataTable.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.UpdateData(System.Data.DataTable,System.String,System.Data.OracleClient.OracleConnection)">
	<summary>
 Updates the underlying data of the System.Data.DataTable using .Net Oracle data provider, and 
 returns the number of rows successfully updated.
 </summary>
	<param name="sourceData">The System.Data.DataTable used to update the underlying data source.</param>
	<param name="sourceSql">The SQL statement used initially to populate the System.Data.DataTable.</param>
	<param name="connection">The System.Data.OracleClient.OracleConnection to use for updating the underlying data source.</param>
	<returns>The number of rows successfully updated from the System.Data.DataTable.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.DelimitedDataToDataTable(System.String,System.String,System.Boolean)">
	<summary>
 Converts delimited text to System.Data.DataTable.
 </summary>
	<param name="delimitedData">The delimited text to be converted to System.Data.DataTable.</param>
	<param name="delimiter">The character(es) used for delimiting the text.</param>
	<param name="header">True if the delimited text contains header information; otherwise False.</param>
	<returns>An System.Data.DataTable object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Data.Common.DataTableToDelimitedData(System.Data.DataTable,System.String,System.Boolean,System.Boolean)">
	<summary>
 Converts the System.Data.DataTable to delimited text.
 </summary>
	<param name="table">The System.Data.DataTable whose data is to be converted to delimited text.</param>
	<param name="delimiter">The character(es) to be used for delimiting the text.</param>
	<param name="quoted">True if text is to be surrounded by quotes; otherwise False.</param>
	<param name="header">True if the delimited text should have header information.</param>
	<returns>A string of delimited text.</returns>
	<remarks></remarks>
</member><member name="T:Tva.Data.Common">
	<summary>
 Defines common shared database related functions.
 </summary>
	<remarks></remarks>
</member><member name="T:Tva.Text.Common.CharacterTestFunctionSignature">
	<summary>Function signature used to test a character to see if it fits a certain criteria</summary>
	<param name="c">Character to test</param>
	<returns>Returns True if specified character passed test</returns>
</member><member name="M:Tva.Text.Common.Concat(System.String[])">
	<summary>Performs a fast concatenation of given string array</summary>
	<param name="values">String array to concatenate</param>
	<returns>The concatenated string representation of the values of the elements in <paramref name="values"/> string array.</returns>
	<remarks>
		<para>This is a replacement for the String.Concat function.  Tests show that the system implemenation of this function is slow:
 http://www.developer.com/net/cplus/article.php/3304901
 </para>
		<para>Reflection into the mscorlib for this function for all versions up to 2.0 shows that it does simple string addition</para>
	</remarks>
</member><member name="M:Tva.Text.Common.ParseBoolean(System.String)">
	<summary>Parses a string intended to represent a boolean value</summary>
	<param name="value">String representing a boolean value</param>
	<returns>Parsed boolean value</returns>
	<remarks>
 This function, unlike Boolean.Parse, correctly parses a boolean value even if the string value
 specified is a number (e.g., 0 or -1).  Boolean.Parse expects a string to be represented as
 "True" or "False" (i.e., Boolean.TrueString or Boolean.FalseString respectively)
 </remarks>
</member><member name="M:Tva.Text.Common.GetStringSegments(System.String,System.Int32)">
	<summary>Turns source string into an array of string segements, each with a set maximum width, for parsing or display purposes</summary>
	<param name="value">Input string to break up into segements</param>
	<param name="segmentSize">Maximum size of returned segment</param>
	<returns>Array of string segments as parsed from source string</returns>
	<remarks>Function will return a single element array with an empty string if source string is null or empty</remarks>
</member><member name="M:Tva.Text.Common.ParseKeyValuePairs(System.String)">
	<summary>Parses key value pair parameters from a string which are delimeted by an equals sign and multiple pairs separated by a semi-colon</summary>
	<param name="value">Key vair string to parse</param>
	<returns>Dictionary of key/value pairs</returns>
	<remarks>
 This will parse a string formated like a typical connection string, e.g.:
 <code>
 IP=localhost; Port=1002; MaxEvents=50; UseTimeout=True
 </code>
 Note that "keys" will be stored in dictionary as "lower case".
 </remarks>
</member><member name="M:Tva.Text.Common.ParseKeyValuePairs(System.String,System.Char,System.Char)">
	<summary>Parses key value pair parameters from a string which are delimeted by an equals sign and multiple pairs separated by a semi-colon</summary>
	<param name="value">Key vair string to parse</param>
	<param name="parameterDelimeter">Character that delimits one key value pair from another (e.g., would be a ";" in a typical connection string)</param>
	<param name="keyValueDelimeter">Character that delimits key from value (e.g., would be an "=" in a typical connection string)</param>
	<returns>Dictionary of key/value pairs</returns>
	<remarks>
 This will parse a key value string that contains one or many pairs.
 Note that "keys" will be stored in dictionary as "lower case".
 </remarks>
</member><member name="M:Tva.Text.Common.NotEmpty(System.String)">
	<summary>Ensures parameter is not an empty or null string - returns a single space if test value is empty</summary>
	<param name="testValue">Value to test for null or empty</param>
	<returns>A non-empty string</returns>
</member><member name="M:Tva.Text.Common.NotEmpty(System.String,System.String)">
	<summary>Ensures parameter is not an empty or null string</summary>
	<param name="testValue">Value to test for null or empty</param>
	<param name="nonEmptyReturnValue">Value to return if <paramref name="testValue">testValue</paramref> is null or empty</param>
	<returns>A non-empty string</returns>
</member><member name="M:Tva.Text.Common.ReplaceCharacters(System.String,System.Char,Tva.Text.Common.CharacterTestFunctionSignature)">
	<summary>Replaces all characters passing delegate test with specified replacement character</summary>
	<param name="value">Input string</param>
	<param name="replacementCharacter">Character used to replace characters passing delegate test</param>
	<param name="characterTestFunction">Delegate used to determine whether or not character should be replaced</param>
	<returns>Returns <paramref name="value"/> with all characters passing delegate test replaced</returns>
	<remarks>This function allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160))</remarks>
</member><member name="M:Tva.Text.Common.RemoveCharacters(System.String,Tva.Text.Common.CharacterTestFunctionSignature)">
	<summary>Removes all characters passing delegate test from a string</summary>
	<param name="value">Input string</param>
	<param name="characterTestFunction">Delegate used to determine whether or not character should be removed</param>
	<returns>Returns <paramref name="value"/> with all characters passing delegate test removed</returns>
</member><member name="M:Tva.Text.Common.RemoveWhiteSpace(System.String)">
	<summary>Removes all white space (as defined by IsWhiteSpace) from a string</summary>
	<param name="value">Input string</param>
	<returns>Returns <paramref name="value"/> with all white space removed</returns>
</member><member name="M:Tva.Text.Common.ReplaceWhiteSpace(System.String,System.Char)">
	<summary>Replaces all white space characters (as defined by IsWhiteSpace) with specified replacement character</summary>
	<param name="value">Input string</param>
	<param name="replacementCharacter">Character used to "replace" white space characters</param>
	<returns>Returns <paramref name="value"/> with all white space characters replaced</returns>
	<remarks>This function allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160))</remarks>
</member><member name="M:Tva.Text.Common.RemoveControlCharacters(System.String)">
	<summary>Removes all control characters from a string</summary>
	<param name="value">Input string</param>
	<returns>Returns <paramref name="value"/> with all control characters removed</returns>
</member><member name="M:Tva.Text.Common.ReplaceControlCharacters(System.String)">
	<summary>Replaces all control characters with a single space</summary>
	<param name="value">Input string</param>
	<returns>Returns <paramref name="value"/> with all control characters replaced as a single space</returns>
</member><member name="M:Tva.Text.Common.ReplaceControlCharacters(System.String,System.Char)">
	<summary>Replaces all control characters with specified replacement character</summary>
	<param name="value">Input string</param>
	<param name="replacementCharacter">Character used to "replace" control characters</param>
	<returns>Returns <paramref name="value"/> with all control characters replaced</returns>
	<remarks>This function allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160))</remarks>
</member><member name="M:Tva.Text.Common.RemoveCrLfs(System.String)">
	<summary>Removes all carriage returns and line feeds from a string</summary>
	<param name="value">Input string</param>
	<returns>Returns <paramref name="value"/> with all CR and LF characters removed.</returns>
</member><member name="M:Tva.Text.Common.ReplaceCrLfs(System.String,System.Char)">
	<summary>Replaces all carriage return and line feed characters (as well as CR/LF sequences) with specified replacement character</summary>
	<param name="value">Input string</param>
	<param name="replacementCharacter">Character used to "replace" CR and LF characters</param>
	<returns>Returns <paramref name="value"/> with all CR and LF characters replaced</returns>
	<remarks>This function allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160))</remarks>
</member><member name="M:Tva.Text.Common.RemoveDuplicates(System.String,System.String)">
	<summary>Removes duplicate character strings (adjoining replication) in a string</summary>
	<param name="value">Input string</param>
	<param name="duplicatedValue">String whose duplicates are to be removed</param>
	<returns>Returns <paramref name="value"/> with all duplicated <paramref name="duplicatedValue"/> removed</returns>
</member><member name="M:Tva.Text.Common.RemoveNull(System.String)">
	<summary>Removes the terminator (Convert.ToChar(0)) from a null terminated string - useful for strings returned from Windows API call</summary>
	<param name="value">Input string</param>
	<returns>Returns <paramref name="value"/> with all characters to the left of the terminator</returns>
</member><member name="M:Tva.Text.Common.RemoveDuplicateWhiteSpace(System.String)">
	<summary>Replaces all repeating white space with a single space</summary>
	<param name="value">Input string</param>
	<returns>Returns <paramref name="value"/> with all duplicate white space removed</returns>
</member><member name="M:Tva.Text.Common.RemoveDuplicateWhiteSpace(System.String,System.Char)">
	<summary>Replaces all repeating white space with specified spacing character</summary>
	<param name="value">Input string</param>
	<param name="spacingCharacter">Character value to use to insert as single white space value</param>
	<returns>Returns <paramref name="value"/> with all duplicate white space removed</returns>
	<remarks>This function allows you to specify spacing character (e.g., you may want to use a non-breaking space: Convert.ToChar(160))</remarks>
</member><member name="M:Tva.Text.Common.CharCount(System.String,System.Char)">
	<summary>Counts the total number of the occurances of <paramref name="characterToCount"/> in the given string</summary>
	<param name="value">Input string</param>
	<param name="characterToCount">Character to be counted</param>
	<returns>Total number of the occurances of <paramref name="characterToCount"/> in the given string</returns>
</member><member name="M:Tva.Text.Common.IsAllDigits(System.String)">
	<summary>Tests to see if a string is all digits</summary>
	<param name="value">Input string</param>
	<returns>True if all string's characters are digits, otherwise false</returns>
</member><member name="M:Tva.Text.Common.IsAllNumbers(System.String)">
	<summary>Tests to see if a string is all numbers</summary>
	<param name="value">Input string</param>
	<returns>True if all string's characters are numbers, otherwise false</returns>
</member><member name="M:Tva.Text.Common.IsAllUpper(System.String)">
	<summary>Tests to see if a string's letters are all upper case</summary>
	<param name="value">Input string</param>
	<returns>True if all string's letter characters are upper case, otherwise false</returns>
</member><member name="M:Tva.Text.Common.IsAllLower(System.String)">
	<summary>Tests to see if a string's letters are all lower case</summary>
	<param name="value">Input string</param>
	<returns>True if all string's letter characters are lower case, otherwise false</returns>
</member><member name="M:Tva.Text.Common.IsAllLetters(System.String)">
	<summary>Tests to see if a string is all letters</summary>
	<param name="value">Input string</param>
	<returns>True if all string's characters are letters, otherwise false</returns>
	<remarks>Any non letter (e.g., punctuation marks) would cause this function to return False - see overload to ignore punctuation marks</remarks>
</member><member name="M:Tva.Text.Common.IsAllLetters(System.String,System.Boolean)">
	<summary>Tests to see if a string is all letters</summary>
	<param name="value">Input string</param>
	<param name="ignorePunctuation">Set to True to ignore punctuation</param>
	<returns>True if all string's characters are letters, otherwise false</returns>
</member><member name="M:Tva.Text.Common.IsAllLettersOrDigits(System.String)">
	<summary>Tests to see if a string is all letters or digits</summary>
	<param name="value">Input string</param>
	<returns>True if all string's characters are letters or digits, otherwise false</returns>
	<remarks>Any non letter or digit (e.g., punctuation marks) would cause this function to return False - see overload to ignore punctuation marks</remarks>
</member><member name="M:Tva.Text.Common.IsAllLettersOrDigits(System.String,System.Boolean)">
	<summary>Tests to see if a string is all letters or digits</summary>
	<param name="value">Input string</param>
	<param name="ignorePunctuation">Set to True to ignore punctuation</param>
	<returns>True if all string's characters are letters or digits, otherwise false</returns>
</member><member name="M:Tva.Text.Common.EncodeRegexChar(System.Char)">
	<summary>Encodes the specified Unicode character in proper Regular Expression format</summary>
	<param name="item">Unicode character to encode in Regular Expression format</param>
	<returns>Specified Unicode character in proper Regular Expression format</returns>
</member><member name="M:Tva.Text.Common.DecodeRegexChar(System.String)">
	<summary>Decodes the specified Regular Expression character back into a standard Unicode character</summary>
	<param name="value">Regular Expression character to decode back into a Unicode character</param>
	<returns>Standard Unicode character representation of specified Regular Expression character</returns>
</member><member name="M:Tva.Text.Common.Base64Encode(System.String)">
	<summary>Encodes a string into a base-64 string</summary>
	<param name="value">Input string</param>
	<remarks>
		<para>This performs a base-64 style of string encoding useful for data obfuscation or safe XML data string transmission</para>
		<para>Note: this function encodes a "String", use the Convert.ToBase64String function to encode a binary data buffer</para>
	</remarks>
</member><member name="M:Tva.Text.Common.Base64Decode(System.String)">
	<summary>Decodes given base-64 encoded string encoded with <see cref="M:Tva.Text.Common.Base64Encode(System.String)"/></summary>
	<param name="value">Input string</param>
	<remarks>Note: this function decodes value back into a "String", use the Convert.FromBase64String function to decode a base-64 encoded string back into a binary data buffer</remarks>
</member><member name="T:Tva.Text.Common">
	<summary>Defines common global functions related to string manipulation</summary>
</member><member name="M:Tva.Xml.Common.GetXmlNode(System.Xml.XmlDocument,System.String)">
	<summary>Gets an Xml node from given path, creating the entire path it if it doesn't exist.</summary>
	<remarks>This overload just allows start given xml document by using its root element.</remarks>
</member><member name="M:Tva.Xml.Common.GetXmlNode(System.Xml.XmlDocument,System.String,System.Boolean@)">
	<summary>Gets an Xml node from given path, creating the entire path it if it doesn't exist.</summary>
	<remarks>
		<para>This overload just allows start given xml document by using its root element.</para>
		<para>Note that the <paramref name="isDirty"/> parameter will be set to True is any items were added to the tree</para>
	</remarks>
</member><member name="M:Tva.Xml.Common.GetXmlNode(System.Xml.XmlNode,System.String)">
	<summary>Gets an Xml node from given path, creating the entire path it if it doesn't exist.</summary>
</member><member name="M:Tva.Xml.Common.GetXmlNode(System.Xml.XmlNode,System.String,System.Boolean@)">
	<summary>Gets an Xml node from given path, creating the entire path it if it doesn't exist.</summary>
	<remarks>Note that the <paramref name="isDirty"/> parameter will be set to True is any items were added to the tree</remarks>
</member><member name="P:Tva.Xml.Common.Attribute(System.Xml.XmlNode,System.String)">
	<summary>Safely gets or sets an XML node's attribute.</summary>
	<remarks>If you assign a value to an attribute that doesn't exist, it will be created</remarks>
</member><member name="M:Tva.Xml.Common.GetDataSet(System.String)">
	<summary>
 Gets a data set object from an XML data set formatted as a String
 </summary>
	<param name="xmlData">XML data string in standard DataSet format</param>
</member><member name="T:Tva.Xml.Common">
	<summary>Defines common global functions related to XML data.</summary>
</member><member name="M:Tva.ExceptionEventArgs.#ctor(System.Exception)">
	<summary>
 Initializes a new instance of the Tva.ExceptionEventArgs class.
 </summary>
	<param name="exception">The exception that was encountered.</param>
</member><member name="M:Tva.ExceptionEventArgs.#ctor(System.Exception,System.Int32)">
	<summary>
 Initializes a new instance of the Tva.ExceptionEventArgs class.
 </summary>
	<param name="exception">The exception that was encountered.</param>
	<param name="occurrenceCount">The number of time the exception has been encountered.</param>
</member><member name="P:Tva.ExceptionEventArgs.Exception">
	<summary>
 Gets or sets the exception that was encountered.
 </summary>
	<value></value>
	<returns>The exception that was encountered.</returns>
</member><member name="P:Tva.ExceptionEventArgs.OccurrenceCount">
	<summary>
 Gets or sets the number of time the exception has been encountered.
 </summary>
	<value></value>
	<returns>The number of time the exception has been encountered.</returns>
</member><member name="T:Tva.DateTime.TimeName">
	<summary>Time names enumeration used by SecondsToText function</summary>
</member><member name="T:Tva.DateTime.TimeZoneName">
	<summary>Time zone names enumeration used to look up desired time zone in GetWin32TimeZone function</summary>
</member><member name="F:Tva.DateTime.BaselineTimeInterval.Second">
	<summary>Baseline timestamp to the second (i.e., starting at zero milliseconds)</summary>
</member><member name="F:Tva.DateTime.BaselineTimeInterval.Minute">
	<summary>Baseline timestamp to the minute (i.e., starting at zero seconds and milliseconds)</summary>
</member><member name="F:Tva.DateTime.BaselineTimeInterval.Hour">
	<summary>Baseline timestamp to the hour (i.e., starting at zero minutes, seconds and milliseconds)</summary>
</member><member name="F:Tva.DateTime.BaselineTimeInterval.Day">
	<summary>Baseline timestamp to the day (i.e., starting at zero hours, minutes, seconds and milliseconds)</summary>
</member><member name="F:Tva.DateTime.BaselineTimeInterval.Month">
	<summary>Baseline timestamp to the month (i.e., starting at day one, zero hours, minutes, seconds and milliseconds)</summary>
</member><member name="F:Tva.DateTime.BaselineTimeInterval.Year">
	<summary>Baseline timestamp to the year (i.e., starting at month one, day one, zero hours, minutes, seconds and milliseconds)</summary>
</member><member name="T:Tva.DateTime.BaselineTimeInterval">
	<summary>Time intervals enumeration used by BaselinedTimestamp function</summary>
</member><member name="F:Tva.DateTime.DateTimePart.Minute">
	<summary>
 Minute part.
 </summary>
</member><member name="F:Tva.DateTime.DateTimePart.Hour">
	<summary>
 Hour part.
 </summary>
</member><member name="F:Tva.DateTime.DateTimePart.Day">
	<summary>
 Day part.
 </summary>
</member><member name="F:Tva.DateTime.DateTimePart.Month">
	<summary>
 Month part.
 </summary>
</member><member name="F:Tva.DateTime.DateTimePart.DayOfWeek">
	<summary>
 Day of week part.
 </summary>
</member><member name="T:Tva.DateTime.DateTimePart">
	<summary>
 The various parts of System.DateTime type.
 </summary>
</member><member name="F:Tva.Configuration.ConfigurationFile.ApplicationEnvironment.Win">
	<summary>
 The configuration file belongs to a windows application.
 </summary>
	<remarks></remarks>
</member><member name="F:Tva.Configuration.ConfigurationFile.ApplicationEnvironment.Web">
	<summary>
 The configuration file belongs to a web application.
 </summary>
	<remarks></remarks>
</member><member name="T:Tva.Configuration.ConfigurationFile.ApplicationEnvironment">
	<summary>
 Specifies the environment of the application to which the configuration file belongs.
 </summary>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.ConfigurationFile.#ctor">
	<summary>
 Initializes a default instance of Tva.Configuration.ConfigurationFile.
 </summary>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.ConfigurationFile.#ctor(System.String)">
	<summary>
 Initializes a instance of Tva.Configuration.ConfigurationFile for the specified configuration file
 that belongs to a windows or web application.
 </summary>
	<param name="configFilePath">Path of the configuration file that belongs to a windows or web application.</param>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.ConfigurationFile.Environment">
	<summary>
 Gets the environment of the application to which the current configuration file belongs.
 </summary>
	<value></value>
	<returns>The environment of the application to which the current configuration file belongs.</returns>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.ConfigurationFile.CategorizedSettings">
	<summary>
 Gets the Tva.Configuration.CategorizedSettingsSection representing the "categorizedSettings" section of the configuration file.
 </summary>
	<value></value>
	<returns>The Tva.Configuration.CategorizedSettingsSection representing the "categorizedSettings" section of the configuration file.</returns>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.ConfigurationFile.AppSettings">
	<summary>
 Gets the System.Configuration.AppSettingsSection representing the "appSettings" section of the configuration file.
 </summary>
	<value></value>
	<returns>The System.Configuration.AppSettingsSection representing the "appSettings" section of the configuration file.</returns>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.ConfigurationFile.ConnectionStrings">
	<summary>
 Gets the System.Configuration.ConnectionStringsSection representing the "connectionStrings" section of the configuration file.
 </summary>
	<value></value>
	<returns>The System.Configuration.ConnectionStringsSection representing the "connectionStrings" section of the configuration file.</returns>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.ConfigurationFile.FilePath">
	<summary>
 Gets the physical path to the configuration file represented by this Tva.Configuration.Configuration object.
 </summary>
	<value></value>
	<returns>The physical path to the configuration file represented by this Tva.Configuration.ConfigurationFile object.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.ConfigurationFile.Save">
	<summary>
 Writes the configuration settings contained within this Tva.Configuration.ConfigurationFile object 
 to the configuration file that it represents.
 </summary>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.ConfigurationFile.Save(System.Configuration.ConfigurationSaveMode)">
	<summary>
 Writes the configuration settings contained within this Tva.Configuration.ConfigurationFile object 
 to the configuration file that it represents.
 </summary>
	<param name="saveMode">A System.Configuration.ConfigurationSaveMode value that determines which property values to save.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.ConfigurationFile.SaveAs(System.String)">
	<summary>
 Writes the configuration settings contained within this Tva.Configuration.ConfigurationFile object 
 to the specified configuration file.
 </summary>
	<param name="fileName">The path and file name to save the configuration file to.</param>
	<remarks></remarks>
</member><member name="T:Tva.Configuration.ConfigurationFile">
	<summary>
 Represents a configuration file of a windows or web application.
 </summary>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.CategorizedSettingsCollection.Item(System.Int32)">
	<summary>
 Gets or sets the Tva.Configuration.CategorizedSettingsElement object at the specified index.
 </summary>
	<param name="index">The zero-based index of the Tva.Configuration.CategorizedSettingsElement to return.</param>
	<value></value>
	<returns>The Tva.Configuration.CategorizedSettingsElement at the specified index; otherwise null.</returns>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.CategorizedSettingsCollection.Item(System.String)">
	<summary>
 Gets the Tva.Configuration.CategorizedSettingsElement object with the specified name.
 </summary>
	<param name="name">The name of the Tva.Configuration.CategorizedSettingsElement to return.</param>
	<value></value>
	<returns>The Tva.Configuration.CategorizedSettingsElement with the specified name; otherwise null.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.IndexOf(Tva.Configuration.CategorizedSettingsElement)">
	<summary>
 Gets the index of the specified Tva.Configuration.CategorizedSettingsElement.
 </summary>
	<param name="setting">The Tva.Configuration.CategorizedSettingsElement whose index is to be returned.</param>
	<returns>The index of the specified Tva.Configuration.CategorizedSettingsElement; otherwise -1.</returns>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.Add(System.String,System.String)">
	<summary>
 Adds a Tva.Configuration.CategorizedSettingsElement with the specified name and value string.
 </summary>
	<param name="name">The name string of the element.</param>
	<param name="value">The value string of the element.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.Add(System.String,System.String,System.Boolean)">
	<summary>
 Adds a Tva.Configuration.CategorizedSettingsElement with the specified name and value string.
 </summary>
	<param name="name">The name string of the element.</param>
	<param name="value">The value string of the element.</param>
	<param name="encryptValue">True if the value string of the element is to be encrypted; otherwise False.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.Add(System.String,System.String,System.String)">
	<summary>
 Adds a Tva.Configuration.CategorizedSettingsElement with the specified name, value and description string.
 </summary>
	<param name="name">The name string of the element.</param>
	<param name="value">The value string of the element.</param>
	<param name="description">The description string of the element.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.Add(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Adds a Tva.Configuration.CategorizedSettingsElement with the specified name, value and description string.
 </summary>
	<param name="name">The name string of the element.</param>
	<param name="value">The value string of the element.</param>
	<param name="description">The description string of the element.</param>
	<param name="encryptValue">True if the value string of the element is to be encrypted; otherwise False.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.Add(Tva.Configuration.CategorizedSettingsElement)">
	<summary>
 Adds the specified Tva.Configuration.CategorizedSettingsElement to the Tva.Configuration.CategorizedSettingsCollection.
 </summary>
	<param name="setting">The Tva.Configuration.CategorizedSettingsElement to add.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.Remove(System.String)">
	<summary>
 Removes a Tva.Configuration.CategorizedSettingsElement with the specified name from the Tva.Configuration.CategorizedSettingsCollection.
 </summary>
	<param name="name">The name of the Tva.Configuration.CategorizedSettingsElement to remove.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.Remove(Tva.Configuration.CategorizedSettingsElement)">
	<summary>
 Removes the specified Tva.Configuration.CategorizedSettingsElement from the Tva.Configuration.CategorizedSettingsCollection.
 </summary>
	<param name="setting">The Tva.Configuration.CategorizedSettingsElement to remove.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.RemoveAt(System.Int32)">
	<summary>
 Remove the Tva.Configuration.CategorizedSettingsElement at the specified location from the Tva.Configuration.CategorizedSettingsCollection.
 </summary>
	<param name="index">The index location of the Tva.Configuration.CategorizedSettingsElement to remove.</param>
	<remarks></remarks>
</member><member name="M:Tva.Configuration.CategorizedSettingsCollection.Clear">
	<summary>
 Removes all Tva.Configuration.CategorizedSettingsElement from the Tva.Configuration.CategorizedSettingsCollection.
 </summary>
	<remarks></remarks>
</member><member name="T:Tva.Configuration.CategorizedSettingsCollection">
	<summary>
 Represents a configuration element containing a collection of Tva.Configuration.CategorizedSettingsElement 
 within a configuration file.
 </summary>
	<remarks></remarks>
</member><member name="M:Tva.DateTime.NtpTimeTag.#ctor(System.Double)">
	<summary>Creates new NTP timetag given number of seconds since 1/1/1900</summary>
	<param name="seconds">Number of seconds since 1/1/1900</param>
</member><member name="M:Tva.DateTime.NtpTimeTag.#ctor(System.DateTime)">
	<summary>Creates new NTP timetag given standard .NET DateTime</summary>
	<param name="timestamp">.NET DateTime to create Unix timetag from (minimum valid date is 1/1/1900)</param>
</member><member name="T:Tva.DateTime.NtpTimeTag">
	<summary>Standard Network Time Protocol Timetag</summary>
</member><member name="F:Tva.Interop.Bit.Nill">
	<summary>No bits set (8-bit)</summary>
</member><member name="F:Tva.Interop.Bit.Nill16">
	<summary>No bits set (16-bit)</summary>
</member><member name="F:Tva.Interop.Bit.Nill32">
	<summary>No bits set (32-bit)</summary>
</member><member name="F:Tva.Interop.Bit.Bit0">
	<summary>Bit 0 (0x00000001)</summary>
</member><member name="F:Tva.Interop.Bit.Bit1">
	<summary>Bit 1 (0x00000002)</summary>
</member><member name="F:Tva.Interop.Bit.Bit2">
	<summary>Bit 2 (0x00000004)</summary>
</member><member name="F:Tva.Interop.Bit.Bit3">
	<summary>Bit 3 (0x00000008)</summary>
</member><member name="F:Tva.Interop.Bit.Bit4">
	<summary>Bit 4 (0x00000010)</summary>
</member><member name="F:Tva.Interop.Bit.Bit5">
	<summary>Bit 6 (0x00000020)</summary>
</member><member name="F:Tva.Interop.Bit.Bit6">
	<summary>Bit 6 (0x00000040)</summary>
</member><member name="F:Tva.Interop.Bit.Bit7">
	<summary>Bit 7 (0x00000080)</summary>
</member><member name="F:Tva.Interop.Bit.Bit8">
	<summary>Bit 8 (0x00000100)</summary>
</member><member name="F:Tva.Interop.Bit.Bit9">
	<summary>Bit 9 (0x00000200)</summary>
</member><member name="F:Tva.Interop.Bit.Bit10">
	<summary>Bit 10 (0x00000400)</summary>
</member><member name="F:Tva.Interop.Bit.Bit11">
	<summary>Bit 11 (0x00000800)</summary>
</member><member name="F:Tva.Interop.Bit.Bit12">
	<summary>Bit 12 (0x00001000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit13">
	<summary>Bit 13 (0x00002000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit14">
	<summary>Bit 14 (0x00004000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit15">
	<summary>Bit 15 (0x00008000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit16">
	<summary>Bit 16 (0x00010000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit17">
	<summary>Bit 17 (0x00020000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit18">
	<summary>Bit 18 (0x00040000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit19">
	<summary>Bit 19 (0x00080000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit20">
	<summary>Bit 20 (0x00100000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit21">
	<summary>Bit 21 (0x00200000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit22">
	<summary>Bit 22 (0x00400000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit23">
	<summary>Bit 23 (0x00800000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit24">
	<summary>Bit 24 (0x01000000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit25">
	<summary>Bit 25 (0x02000000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit26">
	<summary>Bit 26 (0x04000000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit27">
	<summary>Bit 27 (0x08000000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit28">
	<summary>Bit 28 (0x10000000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit29">
	<summary>Bit 29 (0x20000000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit30">
	<summary>Bit 30 (0x40000000)</summary>
</member><member name="F:Tva.Interop.Bit.Bit31">
	<summary>Bit 31 (0x80000000)</summary>
</member><member name="M:Tva.Interop.Bit.HiByte(System.Int16)">
	<summary>
 Returns the high byte (Int8) from a word (Int16).  On Intel platforms this should return the high-order byte 
 of a 16-bit integer value, i.e., the byte value whose in-memory representation is the same as the right-most, 
 most-significant-byte of the integer value.
 </summary>
</member><member name="M:Tva.Interop.Bit.HiWord(System.Int32)">
	<summary>
 Returns the high word (Int16) from a double word (Int32).  On Intel platforms this should return the high-order word
 of a 32-bit integer value, i.e., the word value whose in-memory representation is the same as the right-most,
 most-significant-word of the integer value.
 </summary>
</member><member name="M:Tva.Interop.Bit.LoByte(System.Int16)">
	<summary>
 Returns the low byte (Int8) from a word (Int16).  On Intel platforms this should return the low-order byte
 of a 16-bit integer value, i.e., the byte value whose in-memory representation is the same as the left-most,
 least-significant-byte of the integer value.
 </summary>
</member><member name="M:Tva.Interop.Bit.LoWord(System.Int32)">
	<summary>
 Returns the low word (Int16) from a double word (Int32).  On Intel platforms this should return the low-order word
 of a 32-bit integer value, i.e., the word value whose in-memory representation is the same as the left-most,
 least-significant-word of the integer value.
 </summary>
</member><member name="M:Tva.Interop.Bit.MakeWord(System.Byte,System.Byte)">
	<summary>Makes a word (Int16) from two bytes (Int8).</summary>
</member><member name="M:Tva.Interop.Bit.MakeDWord(System.Int16,System.Int16)">
	<summary>Makes a double word (Int32) from two words (Int16).</summary>
</member><member name="M:Tva.Collections.Common.Minimum(System.Object[])">
	<summary>Returns smallest item from list of parameters</summary>
</member><member name="M:Tva.Collections.Common.Minimum``1(``0[])">
	<summary>Returns smallest item from list of parameters</summary>
</member><member name="M:Tva.Collections.Common.Minimum``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>Returns smallest item from the specified enumeration</summary>
</member><member name="M:Tva.Collections.Common.Minimum(System.Collections.IEnumerable)">
	<summary>Returns smallest item from the specified enumeration</summary>
</member><member name="M:Tva.Collections.Common.Maximum(System.Object[])">
	<summary>Returns largest item from list of parameters</summary>
</member><member name="M:Tva.Collections.Common.Maximum``1(``0[])">
	<summary>Returns largest item from list of parameters</summary>
</member><member name="M:Tva.Collections.Common.Maximum``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>Returns largest item from the specified enumeration</summary>
</member><member name="M:Tva.Collections.Common.Maximum(System.Collections.IEnumerable)">
	<summary>Returns largest item from the specified enumeration</summary>
</member><member name="M:Tva.Collections.Common.Compare``1(``0,``0)">
	<summary>Compares two elements of the specified type.</summary>
</member><member name="M:Tva.Collections.Common.Compare(System.Object,System.Object)">
	<summary>Compares two elements of any type.</summary>
</member><member name="M:Tva.Collections.Common.CompareArrays(System.Array,System.Array)">
	<summary>Compares two arrays</summary>
</member><member name="M:Tva.Collections.Common.CompareArrays(System.Array,System.Array,System.Collections.IComparer)">
	<summary>Compares two arrays</summary>
</member><member name="M:Tva.Collections.Common.ConvertList(System.Collections.IEnumerable,System.Collections.IList,System.Type)">
	<summary>Changes the type of all the elements in source enumeration and adds the conversion result to destination list</summary>
	<remarks>Converted items in source enumeration are added to destination list - destination list is not cleared in advance</remarks>
</member><member name="M:Tva.Collections.Common.ListToArray(System.Collections.IList,System.Type)">
	<summary>Converts a list (i.e., any collection implementing IList) to an array</summary>
</member><member name="M:Tva.Collections.Common.ArrayToString(System.Array)">
	<summary>Converts an array to a string using the default delimeter, "|", that can later be converted back to array using StringToArray</summary>
	<remarks>
 This function is just a semantic reference to the ListToString function (the Array class implements IEnumerable)
 and is only provided for the sake of completeness
 </remarks>
</member><member name="M:Tva.Collections.Common.ArrayToString(System.Array,System.Char)">
	<summary>Converts an array to a string that can later be converted back to array using StringToArray</summary>
	<remarks>
 This function is just a semantic reference to the ListToString function (the Array class implements IEnumerable)
 and is only provided for the sake of completeness
 </remarks>
</member><member name="M:Tva.Collections.Common.ListToString(System.Collections.IEnumerable)">
	<summary>Converts an enumeration to a string using the default delimeter, "|", that can later be converted back to array using StringToList</summary>
</member><member name="M:Tva.Collections.Common.ListToString(System.Collections.IEnumerable,System.Char)">
	<summary>Converts an enumeration to a string that can later be converted back to array using StringToList</summary>
</member><member name="M:Tva.Collections.Common.StringToArray(System.String,System.Type)">
	<summary>Converts a string, created with ArrayToString, using the default delimeter, "|", back into an array</summary>
</member><member name="M:Tva.Collections.Common.StringToArray(System.String,System.Type,System.Char)">
	<summary>Converts a string, created with ArrayToString, back into an array</summary>
</member><member name="M:Tva.Collections.Common.StringToList(System.String,System.Collections.IList)">
	<summary>Appends items parsed from delimited string, created with ArrayToString or ListToString, using the default delimeter, "|",  into the given list</summary>
	<remarks>Converted items are added to destination list - destination list is not cleared in advance</remarks>
</member><member name="M:Tva.Collections.Common.StringToList(System.String,System.Collections.IList,System.Char)">
	<summary>Appends items parsed from delimited string, created with ArrayToString or ListToString, into the given list</summary>
	<remarks>Converted items are added to destination list - destination list is not cleared in advance</remarks>
</member><member name="M:Tva.Collections.Common.ScrambleArray(System.Array)">
	<summary>Rearranges all the elements in the array into a random order</summary>
	<remarks>
		<para>
 This function is just a semantic reference to the ScrambleList function (the Array class implements IList)
 and is only provided for the sake of completeness
 </para>
		<para>This function uses a cryptographically strong random number generator to perform the scramble</para>
	</remarks>
</member><member name="M:Tva.Collections.Common.ScrambleList(System.Collections.IList)">
	<summary>Rearranges all the elements in the list (i.e., any collection implementing IList) into a random order</summary>
	<remarks>This function uses a cryptographically strong random number generator to perform the scramble</remarks>
</member><member name="M:Tva.Collections.Common.IsNonStringReference(System.Object)">
	<summary>Determines if given item is an object (i.e., a reference type) but not a string</summary>
</member><member name="T:Tva.Collections.Common">
	<summary>Defines common global functions related to manipulation of collections</summary>
</member><member name="M:Tva.IO.Common.CopyStream(System.IO.Stream,System.IO.Stream)">
	<summary>Copies input stream onto output stream</summary>
</member><member name="M:Tva.IO.Common.ReadStream(System.IO.Stream)">
	<summary>Reads entire stream contents and returns byte array of data</summary>
	<remarks>Note: you should only use this on streams where you know the data size to be small</remarks>
</member><member name="M:Tva.IO.Common.CopyBuffer(System.Byte[],System.Int32,System.Int32)">
	<summary>Returns a copy of the specified portion of the source buffer</summary>
	<remarks>This function will grow or shrink returned buffer as needed to make it the desired length</remarks>
</member><member name="T:Tva.IO.Common">
	<summary>Defines common IO related functions (e.g., common stream and buffer functions)</summary>
</member><member name="T:Tva.Collections.QueueThreadingMode">
	<summary>
 Enumeration of possible queue threading modes
 </summary>
</member><member name="T:Tva.Collections.QueueProcessingStyle">
	<summary>
 Enumeration of possible queue processing styles
 </summary>
</member><member name="F:Tva.Security.Cryptography.EncryptLevel.None">
	<summary>Use no encryption</summary>
</member><member name="F:Tva.Security.Cryptography.EncryptLevel.Level1">
	<summary>Adds simple multi-alogorithm XOR based encryption</summary>
	<remarks>This is the fastest and weakest level of encyption</remarks>
</member><member name="F:Tva.Security.Cryptography.EncryptLevel.Level2">
	<summary>Adds TripleDES based encryption</summary>
</member><member name="F:Tva.Security.Cryptography.EncryptLevel.Level3">
	<summary>Adds RC2 based encryption</summary>
</member><member name="F:Tva.Security.Cryptography.EncryptLevel.Level4">
	<summary>Adds RijndaelManaged based enryption</summary>
	<remarks>This is the slowest and strongest level of encyption</remarks>
</member><member name="T:Tva.Security.Cryptography.EncryptLevel">
	<summary>Cryptographic Strength Enumeration</summary>
	<remarks>
		<para>
 Encryption algorithms are cumulative, the levels represent tradeoffs on speed vs. cipher strength - level 1
 will have the fastest encryption speed with the simplest encryption strength - level 4 will have the
 strongest cumulative encryption strength with the slowest encryption speed.
 </para>
	</remarks>
</member><member name="M:Tva.Assembly.#ctor(System.Reflection.Assembly)">
	<summary>Initializes a instance of Tva.Assembly for the specified System.Reflection.Assembly.</summary>
	<param name="assemblyInstance">An instance of System.Reflection.Assembly for which a Tva.Assembly instance is to be created.</param>
</member><member name="M:Tva.Assembly.GetShortAssemblyName(System.Reflection.Assembly)">
	<summary>Returns only assembly name and version from full assembly name.</summary>
</member><member name="P:Tva.Assembly.CallingAssembly">
	<summary>Get the Tva.Assembly instance of the assembly that invoked the currently executing method.</summary>
	<returns>The Tva.Assembly instance of the assembly that invoked the currently executing method.</returns>
</member><member name="P:Tva.Assembly.EntryAssembly">
	<summary>Gets the Tva.Assembly instance of the process executable in the default application domain.</summary>
	<returns>The Tva.Assembly instance of the process executable in the default application domain.</returns>
</member><member name="P:Tva.Assembly.ExecutingAssembly">
	<summary>Gets the Tva.Assembly instance of the assembly that contains the code that is currently executing.</summary>
	<returns>The Tva.Assembly instance of the assembly that contains the code that is currently executing.</returns>
</member><member name="P:Tva.Assembly.Title">
	<summary>Gets the title information of the assembly.</summary>
	<returns>The title information of the assembly.</returns>
</member><member name="P:Tva.Assembly.Description">
	<summary>Gets the description information of the assembly.</summary>
	<returns>The description information of the assembly.</returns>
</member><member name="P:Tva.Assembly.Company">
	<summary>Gets the company name information of the assembly.</summary>
	<returns>The company name information of the assembly.</returns>
</member><member name="P:Tva.Assembly.Product">
	<summary>Gets the product name information of the assembly.</summary>
	<returns>The product name information of the assembly.</returns>
</member><member name="P:Tva.Assembly.Copyright">
	<summary>Gets the copyright information of the assembly.</summary>
	<returns>The copyright information of the assembly.</returns>
</member><member name="P:Tva.Assembly.Trademark">
	<summary>Gets the trademark information of the assembly.</summary>
	<returns>The trademark information of the assembly.</returns>
</member><member name="P:Tva.Assembly.Configuration">
	<summary>Gets the configuration information of the assembly.</summary>
	<returns>The configuration information of the assembly.</returns>
</member><member name="P:Tva.Assembly.DelaySign">
	<summary>Gets a boolean value indicating if the assembly has been built as delay-signed.</summary>
	<returns>True if the assembly has been built as delay-signed; otherwise, False.</returns>
</member><member name="P:Tva.Assembly.InformationalVersion">
	<summary>Gets the version information of the assembly.</summary>
	<returns>The version information of the assembly</returns>
</member><member name="P:Tva.Assembly.KeyFile">
	<summary>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</summary>
	<returns>A string containing the name of the file that contains the key pair.</returns>
</member><member name="P:Tva.Assembly.CultureName">
	<summary>Gets the culture name of the assembly.</summary>
	<returns>The culture name of the assembly.</returns>
</member><member name="P:Tva.Assembly.SatelliteContractVersion">
	<summary>Gets the assembly version used to instruct the System.Resources.ResourceManager to ask for a particular version of a satellite assembly to simplify updates of the main assembly of an application.</summary>
</member><member name="P:Tva.Assembly.ComCompatibleVersion">
	<summary>Gets the string representing the assembly version used to indicates to a COM client that all classes in the current version of the assembly are compatible with classes in an earlier version of the assembly.</summary>
	<returns>The string representing the assembly version in MajorVersion.MinorVersion.RevisionNumber.BuildNumber format.</returns>
</member><member name="P:Tva.Assembly.ComVisible">
	<summary>Gets a boolean value indicating if the assembly is exposed to COM.</summary>
	<returns>True if the assembly is exposed to COM; otherwise, False.</returns>
</member><member name="P:Tva.Assembly.Guid">
	<summary>Get the assembly GUID that is used as an ID if the assembly is exposed to COM.</summary>
	<returns>The assembly GUID that is used as an ID if the assembly is exposed to COM.</returns>
</member><member name="P:Tva.Assembly.TypeLibVersion">
	<summary>Gets the string representing the assembly version number in MajorVersion.MinorVersion format.</summary>
	<returns>The string representing the assembly version number in MajorVersion.MinorVersion format.</returns>
</member><member name="P:Tva.Assembly.CLSCompliant">
	<summary>Gets a boolean value indicating whether the indicated program element is CLS-compliant.</summary>
	<returns>True if the program element is CLS-compliant; otherwise, False.</returns>
</member><member name="P:Tva.Assembly.Debuggable">
	<summary>Gets a value that indicates whether the runtime will track information during code generation for the debugger.</summary>
	<returns>True if the runtime will track information during code generation for the debugger; otherwise, False.</returns>
</member><member name="P:Tva.Assembly.Location">
	<summary>Gets the path or UNC location of the loaded file that contains the manifest.</summary>
	<returns>The location of the loaded file that contains the manifest.</returns>
</member><member name="P:Tva.Assembly.CodeBase">
	<summary>Gets the location of the assembly as specified originally, for example, in an System.Reflection.AssemblyName object.</summary>
	<returns>The location of the assembly as specified originally.</returns>
</member><member name="P:Tva.Assembly.FullName">
	<summary>Gets the display name of the assembly.</summary>
	<returns>The display name of the assembly.</returns>
</member><member name="P:Tva.Assembly.Name">
	<summary>Gets the simple, unencrypted name of the assembly.</summary>
	<returns>A string that is the simple, unencrypted name of the assembly.</returns>
</member><member name="P:Tva.Assembly.Version">
	<summary>Gets the major, minor, revision, and build numbers of the assembly.</summary>
	<returns>A System.Version object representing the major, minor, revision, and build numbers of the assembly.</returns>
</member><member name="P:Tva.Assembly.ImageRuntimeVersion">
	<summary>Gets the string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</summary>
	<returns>The string representing the CLR version folder name. This is not a full path.</returns>
</member><member name="P:Tva.Assembly.GACLoaded">
	<summary>Gets a boolean value indicating whether the assembly was loaded from the global assembly cache.</summary>
	<returns>True if the assembly was loaded from the global assembly cache; otherwise, False.</returns>
</member><member name="P:Tva.Assembly.BuildDate">
	<summary>Gets the date and time when the assembly was last built.</summary>
	<returns>The date and time when the assembly was last built.</returns>
</member><member name="P:Tva.Assembly.RootNamespace">
	<summary>Gets the root namespace of the assembly.</summary>
	<returns>The root namespace of the assembly.</returns>
</member><member name="M:Tva.Assembly.GetAttributes">
	<summary>Get a collection of assembly attributes exposed by the assembly.</summary>
	<returns>A System.Specialized.KeyValueCollection of assembly attributes.</returns>
</member><member name="M:Tva.Assembly.GetCustomAttribute(System.Type)">
	<summary>Gets the specified assembly attribute if it is exposed by the assembly.</summary>
	<param name="attributeType">Type of the attribute to get.</param>
	<returns>The assembly attribute.</returns>
</member><member name="M:Tva.Assembly.GetEmbeddedResource(System.String)">
	<summary>Get the specified embedded resource from the assembly.</summary>
	<param name="resourceName">The full name (including the namespace) of the embedded resource to get.</param>
	<returns>The embedded resource.</returns>
</member><member name="M:Tva.Assembly.LoadAssemblyFromResource(System.String)">
	<summary>Load the specified assembly that is embedded as a resource in the assembly.</summary>
	<param name="assemblyName">Name of the assembly to load.</param>
</member><member name="P:Tva.Configuration.Common.DefaultConfigFile">
	<summary>
 Gets or sets the Tva.Configuration.ConfigurationFile object that represents the configuration
 file of the currently executing windows or web application.
 </summary>
	<value></value>
	<returns>
 The Tva.Configuration.ConfigurationFile object that represents the configuration file of the 
 currently executing windows or web application.
 </returns>
	<remarks>
		<para>
 Use this property to access the settings saved under the "appSettings" and "connectionStrings"
 sections provided by the .Net framework in addition to the "categorizedSettings" sections.
 </para>
		<para>
 Example:
 <code>
 With DefaultConfigFile()
     ' Adds setting to the "appSettings" section of the config file.
     .AppSettings.Settings.Add("SaveSettingsOnExit", "1")
 
     ' Adds setting to the "connectionStrings" section of the config file.
     .ConnectionStrings.ConnectionStrings.Add(New ConnectionStringSettings("DbConnectString", "Server=RGOCSQLD;Database=DB;Trusted_Connection=True"))
 
     ' Adds settings to the "categorizedSettings" section of the config file.
     .CategorizedSettings.General.Add("SaveSettingsOnExit", "1")
     .CategorizedSettings("Development").Add("DbConnectString", "Server=RGOCSQLD;Database=DB;Trusted_Connection=True", True)
     .CategorizedSettings("Production").Add("DbConnectString", "Server=OPDATSQL;Database=DB;Trusted_Connection=True", True)
 
     ' Saves modified settings to the config file.
     .Save()
 End With
 </code>
		</para>
	</remarks>
</member><member name="P:Tva.Configuration.Common.CustomConfigFile(System.String)">
	<summary>
 Gets the Tva.Configuration.ConfigurationFile object that represent the specified configuration
 file that belongs a windows or web application.
 </summary>
	<param name="filePath">Path of the configuration file that belongs to a windows or web application.</param>
	<value></value>
	<returns></returns>
	<remarks>
		<para>
 Use this property for accessing the configuration files of other windows or web applications.
 This will also give access to settings saved under the "appSettings" and "connectionStrings"
 sections provided by the .Net framework in addition to the "categorizedSettings" sections.
 </para>
		<para>
 Example:
 <code>
 ' Manupulating the configuration file of another windows application.
 With CustomConfigFile("C:\Projects\WindowsApplication1\bin\Debug\WindowsApplication1.exe.config")
     ' Adds setting to the "appSettings" section of the config file.
     .AppSettings.Settings.Add("SaveSettingsOnExit", "1")
 
     ' Adds setting to the "connectionStrings" section of the config file.
     .ConnectionStrings.ConnectionStrings.Add(New ConnectionStringSettings("DbConnectString", "Server=RGOCSQLD;Database=DB;Trusted_Connection=True"))
 
     ' Adds settings to the "categorizedSettings" section of the config file.
     .CategorizedSettings.General.Add("SaveSettingsOnExit", "1")
     .CategorizedSettings("Development").Add("DbConnectString", "Server=RGOCSQLD;Database=DB;Trusted_Connection=True", True)
     .CategorizedSettings("Production").Add("DbConnectString", "Server=OPDATSQL;Database=DB;Trusted_Connection=True", True)
 
     ' Saves modified settings to the config file.
     .Save()
 End With
 
 ' Manupulating the configuration file of another web application.
 With CustomConfigFile("/WebApplication1/web.config")
     ' Adds setting to the "appSettings" section of the config file.
     .AppSettings.Settings.Add("SaveSettingsOnExit", "1")
 
     ' Adds setting to the "connectionStrings" section of the config file.
     .ConnectionStrings.ConnectionStrings.Add(New ConnectionStringSettings("DbConnectString", "Server=RGOCSQLD;Database=DB;Trusted_Connection=True"))
 
     ' Adds settings to the "categorizedSettings" section of the config file.
     .CategorizedSettings.General.Add("SaveSettingsOnExit", "1")
     .CategorizedSettings("Development").Add("DbConnectString", "Server=RGOCSQLD;Database=DB;Trusted_Connection=True", True)
     .CategorizedSettings("Production").Add("DbConnectString", "Server=OPDATSQL;Database=DB;Trusted_Connection=True", True)
 
     ' Saves modified settings to the config file.
     .Save()
 End With
 </code>
		</para>
	</remarks>
</member><member name="P:Tva.Configuration.Common.Settings">
	<summary>
 Gets the Tva.Configuration.CategorizedSettingsCollection representing the settings under "general"
 category of the "categorizedSettings" section within the default configuration file.
 </summary>
	<value></value>
	<returns>
 The Tva.Configuration.CategorizedSettingsCollection representing the settings under "general"
 category of the "categorizedSettings" section.
 </returns>
	<remarks>
		<para>
 This property is meant to be a shortcut for accessing the settings under the "general" category of 
 "categorizedSettings" section within the configuration file. In order to access the settings under 
 "appSettings" and "connectionStrings" sections, use either DefaultConfigFile() or CustomConfigFile() 
 property.
 </para>
		<para>
 Example:
 <code>
 Settings.Add("SaveSettingsOnExit", "1") ' Add a new setting to the "general" category.
 SaveSettings() ' Propogate the changes to the config file.
 
 Settings("SaveSettingsOnExit").Value() ' Read an existing setting from the "general" category.
 </code>
		</para>
	</remarks>
</member><member name="P:Tva.Configuration.Common.CategorizedSettings(System.String)">
	<summary>
 Gets the Tva.Configuration.CategorizedSettingsCollection representing the settings under the specified
 category of the "categorizedSettings" section within the default configuration file.
 </summary>
	<param name="category">The name of the category whose settings are to be retreived.</param>
	<value></value>
	<returns>
 The Tva.Configuration.CategorizedSettingsCollection representing the settings under the specified
 category of the "categorizedSettings" section.
 </returns>
	<remarks>
		<para>
 This property is meant to be a shortcut for accessing the settings under the various categories,
 including "general", of "categorizedSettings" section within the configuration file. In order to access 
 the settings under "appSettings" and "connectionStrings" sections, use either DefaultConfigFile() or 
 CustomConfigFile() property.
 </para>
		<para>
 Example:
 <code>
 CategorizedSettings("Development").Add("DbConnectString", "Server=RGOCSQLD;Database=DB;Trusted_Connection=True", True) ' Add a new setting to the "development" category.
 SaveSettings() ' Propogate the changes to the config file.
 
 CategorizedSettings("Development")("DbConnectString").Value() ' Read an existing setting from the "development" category.
 </code>
		</para>
	</remarks>
</member><member name="M:Tva.Configuration.Common.SaveSettings">
	<summary>
 Writes the modified configuration settings to the default configuration file.
 </summary>
	<remarks></remarks>
</member><member name="T:Tva.Configuration.Common">
	<summary>
 Defines common shared configuration file related functions.
 </summary>
	<remarks></remarks>
</member><member name="P:Tva.Identity.Common.CurrentUser">
	<summary>Gets the current user's information</summary>
</member><member name="P:Tva.Identity.Common.CurrentUserID">
	<summary>Gets the current user's NT ID.</summary>
</member><member name="M:Tva.Identity.Common.AuthenticateUser(System.String,System.String,System.String)">
	<summary>Validates NT authentication given the specified credentials</summary>
</member><member name="M:Tva.Identity.Common.ImpersonateUser(System.String,System.String,System.String)">
	<summary>Impersonates the specified user</summary>
	<param name="username">To be provided.</param>
</member><member name="M:Tva.Identity.Common.EndImpersonation(System.Security.Principal.WindowsImpersonationContext)">
	<summary>Ends impersonation of the specified user</summary>
</member><member name="M:Tva.Serialization.CloneObject``1(``0)">
	<summary>
 Creates a clone of a serializable object.
 </summary>
	<typeparam name="T">Return type of the object.</typeparam>
	<param name="sourceObject">The source object that is to be cloned.</param>
	<returns>A clone of the source serializable object.</returns>
</member><member name="M:Tva.Serialization.GetObject``1(System.Byte[])">
	<summary>
 Gets an instance of the specified type from the bytes of a previously serialized object.
 </summary>
	<typeparam name="T">Return type of the object.</typeparam>
	<param name="serializedObject">The bytes of a previously serialized object.</param>
	<returns>An instance of the specified type if the bytes can be deserialized; otherwise Nothing.</returns>
</member><member name="M:Tva.Serialization.GetObject(System.Byte[])">
	<summary>
 Gets a System.Object instance from the bytes of a previously serialized object.
 </summary>
	<param name="serializedObject">The bytes of a previously serialized object.</param>
	<returns>A System.Object instance if the specified bytes can be deserialized; otherwise Nothing.</returns>
</member><member name="M:Tva.Serialization.GetBytes(System.Object)">
	<summary>
 Gets the bytes of a serializable object after serializing it.
 </summary>
	<param name="serializableObject">The serializable object.</param>
	<returns>
 The bytes of an object after serializing it if the object is serializable; otherwise a zero-length byte array.
 </returns>
</member><member name="M:Tva.Serialization.GetStream(System.Byte[])">
	<summary>
 Gets a System.IO.MemoryStream from the bytes of a previously serialized object.
 </summary>
	<param name="serializedObject">The bytes of a previously serialized object.</param>
	<returns>A System.IO.MemoryStream from the bytes of a previously serialized object.</returns>
</member><member name="M:Tva.Serialization.GetStream(System.Object)">
	<summary>
 Gets a System.IO.MemoryStream from a serializable object.
 </summary>
	<param name="serializableObject">The serializable object.</param>
	<returns>A System.IO.MemoryStream if the specified object can be serialized; otherwise an empty stream.</returns>
</member><member name="E:Tva.Scheduling.ScheduleManager.Starting">
	<summary>
 Occurs while the schedule manager is waiting to start at top of the minute.
 </summary>
</member><member name="E:Tva.Scheduling.ScheduleManager.Started">
	<summary>
 Occurs when the schedule manager has started.
 </summary>
</member><member name="E:Tva.Scheduling.ScheduleManager.Stopped">
	<summary>
 Occurs when the schedule manager has stopped.
 </summary>
</member><member name="E:Tva.Scheduling.ScheduleManager.CheckingSchedule">
	<summary>
 Occurs when the a particular schedule is being checked to see if it is due.
 </summary>
</member><member name="E:Tva.Scheduling.ScheduleManager.ScheduleDue">
	<summary>
 Occurs when a schedule is due according to the rule specified for the schedule.
 </summary>
</member><member name="P:Tva.Scheduling.ScheduleManager.ConfigurationElement">
	<summary>
 Gets or sets the element name of the application configuration file under which the schedules will be saved.
 </summary>
	<value></value>
	<returns>The element name of the application configuration file under which the schedules will be saved.</returns>
</member><member name="P:Tva.Scheduling.ScheduleManager.PersistSchedules">
	<summary>
 Gets or sets a boolean value indicating whether the schedules will be saved to the application 
 configuration file when this instance of Tva.ScheduleManager is stopped or disposed.
 </summary>
	<value>True if the schedules will be saved to the application configuration file; otherwise False.</value>
</member><member name="P:Tva.Scheduling.ScheduleManager.Enabled">
	<summary>
 Gets or sets a boolean value indicating whether the schedule manager is enabled.
 </summary>
	<value></value>
	<returns>True if the schedule manager is enabled; otherwise False.</returns>
</member><member name="P:Tva.Scheduling.ScheduleManager.IsRunning">
	<summary>
 Gets a boolean value indicating whether the schedule manager is running.
 </summary>
	<value></value>
	<returns>True if the schedule manager is running; otherwise False.</returns>
</member><member name="P:Tva.Scheduling.ScheduleManager.Schedules">
	<summary>
 Gets a list of all the schedules.
 </summary>
	<value></value>
	<returns>A list of the schedules.</returns>
</member><member name="M:Tva.Scheduling.ScheduleManager.Start">
	<summary>
 Starts the schedule manager asynchronously.
 </summary>
</member><member name="M:Tva.Scheduling.ScheduleManager.Stop">
	<summary>
 Stops the schedule manager.
 </summary>
</member><member name="M:Tva.Scheduling.ScheduleManager.LoadSchedules">
	<summary>
 Loads previously saved schedules from the application configuration file.
 </summary>
</member><member name="M:Tva.Scheduling.ScheduleManager.SaveSchedules">
	<summary>
 Saves all schedules to the application configuration file.
 </summary>
</member><member name="M:Tva.Scheduling.ScheduleManager.CheckSchedule(System.String)">
	<summary>
 Checks the specified schedule to determine if it is due.
 </summary>
	<param name="scheduleName">Name of the schedule to be checked.</param>
</member><member name="M:Tva.Scheduling.ScheduleManager.CheckAllSchedules">
	<summary>
 Checks all of the schedules to determine if they are due.
 </summary>
</member><member name="T:Tva.Measurements.Concentrator.PublishFrameFunctionSignature">
	<summary>Consumers must implement this delegate to publish a frame</summary>
</member><member name="T:Tva.Measurements.Concentrator.CreateNewFrameFunctionSignature">
	<summary>Consumers must implement this delegate to create a new frame</summary>
</member><member name="E:Tva.Measurements.Concentrator.SamplePublished">
	<summary>This event is raised after a sample is published so that consumers may handle any last minute operations on a sample before it gets released</summary>
</member><member name="E:Tva.Measurements.Concentrator.UnpublishedSamples">
	<summary>This event gets raised every second allowing consumer to track current number of unpublished samlples</summary>
</member><member name="E:Tva.Measurements.Concentrator.ProcessException">
	<summary>This event will be raised if there is an exception encountered while attempting to process a frame in the sample queue</summary>
	<remarks>Processing won't stop for any exceptions thrown by the user function, but any captured exceptions will be exposed through this event</remarks>
</member><member name="M:Tva.Measurements.Concentrator.#ctor(Tva.Measurements.Concentrator.PublishFrameFunctionSignature,Tva.Measurements.Concentrator.CreateNewFrameFunctionSignature,System.Int32,System.Double,System.Double)">
	<summary>Creates a new measurement concentrator</summary>
	<param name="publishFrameFunction">User function used to publish a frame</param>
	<param name="createNewFrameFunction">User function used to create a new frame</param>
	<param name="framesPerSecond">Number of frames to publish per second</param>
	<param name="lagTime">Allowed past time deviation tolerance, in seconds - this becomes the amount of time to wait before publishing begins</param>
	<param name="leadTime">Allowed future time deviation tolerance, in seconds</param>
	<remarks>
		<para>framesPerSecond must be at least one.</para>
		<para>lagTime must be greater than zero but can be specified in sub-second intervals (e.g., set to .25 for a quarter-second lag time) - note that this defines time sensitivity to past timestamps.</para>
		<para>leadTime must be greater than zero but can be specified in sub-second intervals (e.g., set to .5 for a half-second lead time) - note that this defines time sensitivity to future timestamps.</para>
		<para>Publish frame function delegate parameter may be initialized to null, but must be defined before concentrator is enabled.</para>
		<para>If create new frame function delegate is initialized to null, default frame creation function will be used.</para>
		<para>Note that concentration will not begin until consumer sets Enabled = True.</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">Specified argument is outside of allowed value range (see remarks).</exception>
</member><member name="M:Tva.Measurements.Concentrator.#ctor(Tva.Measurements.Concentrator.PublishFrameFunctionSignature,System.Int32,System.Double,System.Double)">
	<summary>Creates a new measurement concentrator using default frame creation function</summary>
	<param name="publishFrameFunction">User function used to publish a frame</param>
	<param name="framesPerSecond">Number of frames to publish per second</param>
	<param name="lagTime">Allowed past time deviation tolerance, in seconds - this becomes the amount of time to wait before publishing begins</param>
	<param name="leadTime">Allowed future time deviation tolerance, in seconds</param>
	<remarks>
		<para>framesPerSecond must be at least one.</para>
		<para>lagTime must be greater than zero but can be specified in sub-second intervals (e.g., set to .25 for a quarter-second lag time) - note that this defines time sensitivity to past timestamps.</para>
		<para>leadTime must be greater than zero but can be specified in sub-second intervals (e.g., set to .5 for a half-second lead time) - note that this defines time sensitivity to future timestamps.</para>
		<para>Publish frame function delegate parameter may be initialized to null, but must be defined before concentrator is enabled.</para>
		<para>Note that concentration will not begin until consumer sets Enabled = True.</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">Specified argument is outside of allowed value range (see remarks).</exception>
</member><member name="P:Tva.Measurements.Concentrator.This">
	<summary>Handy instance reference to self</summary>
</member><member name="P:Tva.Measurements.Concentrator.PublishFrameFunction">
	<summary>User function used to publish a frame</summary>
</member><member name="P:Tva.Measurements.Concentrator.CreateNewFrameFunction">
	<summary>User function used to create a new frame</summary>
	<remarks>If you assign function delegate to null, default frame creation function will be used</remarks>
</member><member name="P:Tva.Measurements.Concentrator.LagTime">
	<summary>Allowed past time deviation tolerance in seconds (can be subsecond)</summary>
	<remarks>
		<para>This value defines the time sensitivity to past measurement timestamps.</para>
		<para>Defined the number of seconds allowed before assuming a measurement timestamp is too old.</para>
		<para>This becomes the amount of "delay" introduced by the concentrator to allow time for data to flow into the system.</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LagTime must be greater than zero, but it can be less than one</exception>
</member><member name="P:Tva.Measurements.Concentrator.LeadTime">
	<summary>Allowed future time deviation tolerance in seconds (can be subsecond)</summary>
	<remarks>
		<para>This value defines the time sensitivity to future measurement timestamps.</para>
		<para>Defined the number of seconds allowed before assuming a measurement timestamp is too advanced.</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LeadTime must be greater than zero, but it can be less than one</exception>
</member><member name="P:Tva.Measurements.Concentrator.LatestMeasurements">
	<summary>Absolute latest received measurement values</summary>
</member><member name="P:Tva.Measurements.Concentrator.FramesPerSecond">
	<summary>Frames per second</summary>
</member><member name="P:Tva.Measurements.Concentrator.FrameRate">
	<summary>Frame rate (i.e., ticks per frame)</summary>
</member><member name="P:Tva.Measurements.Concentrator.Enabled">
	<summary>Gets or sets current enabled state of concentrator</summary>
	<returns>Current enabled state of concentrator</returns>
	<remarks>Concentrator must be enabled (i.e., Enabled = True) before concentration will begin</remarks>
	<exception cref="T:System.NullReferenceException">This exception will be thrown if the PublishFrameFunction is null when Enabled is set to True.</exception>
</member><member name="P:Tva.Measurements.Concentrator.CurrentSampleTimestamp">
	<summary>Baselined timestamp of newest sample</summary>
</member><member name="P:Tva.Measurements.Concentrator.RealTimeTicks">
	<summary>Ticks of most recent measurement, or local clock ticks if no measurements are within time deviation tolerances</summary>
	<remarks>
 If real-time (i.e., newest received measurement timestamp) gets too old or creeps too far
 into the future, we fall back on local system time.  Note that this creates a dependency
 on an accurate local clock - the smaller the time deviation tolerances the better the needed
 local clock acuracy.  For example, time deviation tolerances of a few seconds might only
 require keeping the local clock synchronized to an NTP time source but sub-second tolerances
 would require that the local clock be synchronized to a GPS time source.
 </remarks>
</member><member name="M:Tva.Measurements.Concentrator.DistanceFromRealTime(System.Int64)">
	<summary>Seconds given number of ticks is away from real-time</summary>
</member><member name="P:Tva.Measurements.Concentrator.DiscardedMeasurements">
	<summary>Number of measurements that have been discarded because of bad timestamps (i.e., measurements that were outside the time deviation tolerance from base time - past or future)</summary>
</member><member name="M:Tva.Measurements.Concentrator.SortMeasurement(Tva.Measurements.IMeasurement)">
	<summary>Data comes in one-point at a time, so we use this function to place the point in its proper sample and row/cell position</summary>
</member><member name="M:Tva.Measurements.Concentrator.QueueMeasurementForSorting(Tva.Measurements.IMeasurement)">
	<summary>Queues measurement for sorting in the thread pool</summary>
	<remarks>
 Sorting items directly may provide a small speed improvement and will use less resources, however TCP stream processing
 can fall behind under heavy load, so sorting measurements on a thread may be required for high-volume TCP input streams
 </remarks>
</member><member name="P:Tva.Measurements.Concentrator.Status">
	<summary>Detailed current state and status of concentrator</summary>
</member><member name="M:Tva.Measurements.Concentrator.Dispose">
	<summary>Shuts down concentrator and clears sample queue in an orderly fashion</summary>
</member><member name="M:Tva.Measurements.Concentrator.Finalize">
	<summary>We implement finalizer for this class to ensure sample queue shuts down in an orderly fashion</summary>
</member><member name="P:Tva.Measurements.Concentrator.SampleQueue">
	<summary>Sample processing queue</summary>
</member><member name="M:Tva.Measurements.Concentrator.GetSample(System.Int64)">
	<summary>This critical function automatically manages the sample queue based on timestamps of incoming measurements</summary>
	<returns>The sample associated with the specified timestamp. If the sample is not found at timestamp, it will be created.</returns>
	<param name="ticks">Ticks of the timestamp of the sample to get</param>
	<remarks>Function will return null if timestamp is outside of the specified time deviation tolerance</remarks>
</member><member name="M:Tva.Measurements.Concentrator.LookupSample(System.Int64)">
	<summary>Gets the sample associated with the specified timestamp.</summary>
	<returns>The sample associated with the specified timestamp. If the specified timestamp is not found, property returns null.</returns>
	<param name="ticks">The ticks of the baselined timestamp of the sample to get.</param>
</member><member name="T:Tva.Services.ServiceState">
	<summary>Windows service states</summary>
</member><member name="T:Tva.Services.ProcessState">
	<summary>Windows service process states</summary>
</member><member name="T:Tva.Collections.KeyedProcessQueue`2.ProcessItemFunctionSignature">
	<summary>
 This is the function signature used for defining a method to process a key and value one at a time
 </summary>
	<remarks>
		<para>Implementation of this function is required unless ProcessItemsFunction is implemented</para>
		<para>This function is used when creating a queue to process one item at a time</para>
		<para>Asynchronous queues will process individual items on multiple threads</para>
	</remarks>
	<param name="key">key to be processed</param>
	<param name="value">value to be processed</param>
</member><member name="T:Tva.Collections.KeyedProcessQueue`2.ProcessItemsFunctionSignature">
	<summary>
 This is the function signature used for defining a method to process multiple keys and values at once
 </summary>
	<remarks>
		<para>Implementation of this function is required unless ProcessItemFunction is implemented</para>
		<para>This function is used when creating a queue to process multiple items at once</para>
		<para>Asynchronous queues will process groups of items on multiple threads</para>
	</remarks>
	<param name="keys">keys to be processed</param>
	<param name="values">values to be processed</param>
</member><member name="T:Tva.Collections.KeyedProcessQueue`2.CanProcessItemFunctionSignature">
	<summary>
 This is the function signature used for determining if a key and value can be currently processed
 </summary>
	<remarks>
		<para>Implementation of this function is optional; it will be assumed that an item can be processed if this function is not defined</para>
		<para>Items must eventually get to a state where they can be processed or they will remain in the queue forever</para>
		<para>
 Note that when this function is implemented and ProcessingStyle = ManyAtOnce (i.e., ProcessItemsFunction is defined)
 then each item presented for processing must evaluate as "CanProcessItem = True" before any items are processed
 </para>
	</remarks>
	<param name="key">key to be checked for processing availablity</param>
	<param name="value">value to be checked for processing availablity</param>
	<returns>Function should return True if key and value can be processed</returns>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature)">
	<summary>
 Create a new keyed asynchronous process queue with the default settings: ProcessInterval = 100, MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new keyed asynchronous process queue with the default settings: ProcessInterval = 100, MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,System.Int32)">
	<summary>
 Create a new keyed asynchronous process queue with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Int32)">
	<summary>
 Create a new keyed asynchronous process queue with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new keyed asynchronous process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new keyed asynchronous process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature)">
	<summary>
 Create a new keyed synchronous process queue (i.e., single process thread) with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new keyed synchronous process queue (i.e., single process thread) with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new keyed synchronous process queue (i.e., single process thread) using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new keyed synchronous process queue (i.e., single process thread) using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature)">
	<summary>
 Create a new keyed real-time process queue with the default settings: ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new keyed real-time process queue with the default settings: ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new keyed real-time process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new keyed real-time process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature)">
	<summary>
 Create a new asynchronous bulk-item process queue with the default settings: ProcessInterval = 100, MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new asynchronous bulk-item process queue with the default settings: ProcessInterval = 100, MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,System.Int32)">
	<summary>
 Create a new asynchronous bulk-item process queue with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Int32)">
	<summary>
 Create a new asynchronous bulk-item process queue with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new asynchronous bulk-item process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new asynchronous bulk-item process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature)">
	<summary>
 Create a new synchronous bulk-item process queue (i.e., single process thread) with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new synchronous bulk-item process queue (i.e., single process thread) with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new synchronous bulk-item process queue (i.e., single process thread) using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new synchronous bulk-item process queue (i.e., single process thread) using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature)">
	<summary>
 Create a new real-time bulk-item process queue with the default settings: ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new real-time bulk-item process queue with the default settings: ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new real-time bulk-item process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new real-time bulk-item process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.#ctor(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 This constructor creates a ProcessList based on the generic DictionaryList class
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.#ctor(Tva.Collections.KeyedProcessQueue{`0,`1}.ProcessItemsFunctionSignature,Tva.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 This constructor creates a bulk-item ProcessList based on the generic DictionaryList class
 </summary>
</member><member name="P:Tva.Collections.KeyedProcessQueue`2.ProcessItemFunction">
	<summary>
 This property defines the user function used to process items in the list one at a time
 </summary>
	<remarks>
		<para>This function and ProcessItemsFunction cannot be defined at the same time</para>
		<para>A queue must be defined to process a single item at a time or many items at once</para>
		<para>Implementation of this function makes ProcessingStyle = OneAtATime</para>
	</remarks>
</member><member name="P:Tva.Collections.KeyedProcessQueue`2.ProcessItemsFunction">
	<summary>
 This property defines the user function used to process multiple items in the list at once
 </summary>
	<remarks>
		<para>This function and ProcessItemFunction cannot be defined at the same time</para>
		<para>A queue must be defined to process a single item at a time or many items at once</para>
		<para>Implementation of this function makes ProcessingStyle = ManyAtOnce</para>
	</remarks>
</member><member name="P:Tva.Collections.KeyedProcessQueue`2.CanProcessItemFunction">
	<summary>
 This property defines the user function used to determine if an item is ready to be processed
 </summary>
</member><member name="P:Tva.Collections.KeyedProcessQueue`2.Name">
	<summary>
 Returns class name
 </summary>
	<remarks>
		<para>This name is used for class identification in strings (e.g., used in error message)</para>
		<para>Derived classes should override this method with a proper class name</para>
	</remarks>
</member><member name="P:Tva.Collections.KeyedProcessQueue`2.InternalDictionary">
	<summary>
 This property allows derived classes to access the internal sorted dictionary directly
 </summary>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.Add(`0,`1)">
	<summary>Adds an element with the provided key and value to the queue.</summary>
	<param name="value">The object to use as the value of the element to add.</param>
	<param name="key">The object to use as the key of the element to add.</param>
	<exception cref="T:System.NotSupportedException">The queue is read-only.</exception>
	<exception cref="T:System.ArgumentException">An element with the same key already exists in the queue.</exception>
	<exception cref="T:System.ArgumentNullException">key is null.</exception>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.ContainsKey(`0)">
	<summary>Determines whether the queue contains an element with the specified key.</summary>
	<returns>true if the queue contains an element with the key; otherwise, false.</returns>
	<param name="key">The key to locate in the queue.</param>
	<exception cref="T:System.ArgumentNullException">key is null.</exception>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.ContainsValue(`1)">
	<summary>Determines whether the queue contains an element with the specified value.</summary>
	<returns>true if the queue contains an element with the value; otherwise, false.</returns>
	<param name="value">The value to locate in the queue.</param>
</member><member name="P:Tva.Collections.KeyedProcessQueue`2.Item(`0)">
	<summary>Gets or sets the value associated with the specified key.</summary>
	<returns>The value associated with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException, and a set operation creates a new element with the specified key.</returns>
	<param name="key">The key of the value to get or set.</param>
	<exception cref="T:System.ArgumentNullException">key is null.</exception>
	<exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key does not exist in the collection.</exception>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.Remove(`0)">
	<summary>Removes the element with the specified key from the queue.</summary>
	<param name="key">The key of the element to remove.</param>
	<exception cref="T:System.ArgumentNullException">key is null.</exception>
</member><member name="M:Tva.Collections.KeyedProcessQueue`2.TryGetValue(`0,`1@)">
	<summary>Gets the value associated with the specified key.</summary>
	<returns>true if the queue contains an element with the specified key; otherwise, false.</returns>
	<param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
	<param name="key">The key of the value to get.</param>
	<exception cref="T:System.ArgumentNullException">key is null.</exception>
</member><member name="P:Tva.Collections.KeyedProcessQueue`2.Keys">
	<summary>Gets an ICollection containing the keys of the queue.</summary>
	<returns>An ICollection containing the keys of the queue.</returns>
</member><member name="P:Tva.Collections.KeyedProcessQueue`2.Values">
	<summary>Gets an ICollection containing the values of the queue.</summary>
	<returns>An ICollection containing the values of the queue.</returns>
</member><member name="T:Tva.Collections.KeyedProcessQueue`2">
	<summary>
		<para>This class will process a keyed collection of items on independent threads.</para>
		<para>Consumer must implement a function to process items.</para>
	</summary>
	<typeparam name="TKey">Type of keys used to reference process items</typeparam>
	<typeparam name="TValue">Type of values to process</typeparam>
	<remarks>
		<para>This class acts as a strongly typed sorted dictionary of objects to be processed.</para>
		<para>Consumers are expected to create new instances of this class through the static construction functions (e.g., CreateAsynchronousQueue, CreateSynchronousQueue, etc.)</para>
		<para>Note that the queue will not start processing until the Start method is called.</para>
		<para>Because this queue represents a dictionary style collection, all keys must be unique.</para>
		<para>
 Be aware that this class is based on a DictionaryList (i.e., a SortedList that implements IList) and
 since items in this kind of list are automatically sorted, items will be processed in "sorted" order
 regardless of the order in which they are added to the list.
 </para>
		<para>
 Important note about using an "Integer" as the key for this class: because the queue base class must
 implement IList, a normal dictionary cannot be used for the base class.  IDictionary implementations
 do not normally implement the IList interface because of ambiguity that is caused when implementing
 an integer key.  For example, if you implement this class with a key of type "Integer" you will not
 be able to access items in the queue by index without "casting" the queue as IList, this is because
 the Item property in both the IDictionary and IList would have the same parameters (see the
 DictionaryList class for more details.)
 </para>
	</remarks>
</member><member name="P:Tva.Scheduling.Schedule.Name">
	<summary>
 Gets or sets the schedule name.
 </summary>
	<value></value>
	<returns>The schedule name.</returns>
</member><member name="P:Tva.Scheduling.Schedule.Rule">
	<summary>
 Gets or sets the schedule rule.
 </summary>
	<value></value>
	<returns>The schedule rule.</returns>
</member><member name="P:Tva.Scheduling.Schedule.Status">
	<summary>
 Gets the current status of the schedule.
 </summary>
	<value></value>
	<returns>The current status of the schedule.</returns>
</member><member name="M:Tva.Scheduling.Schedule.IsDue">
	<summary>
 Checks whether the schedule is due at the present system time.
 </summary>
	<returns>True if the schedule is due at the present system time; otherwise False.</returns>
</member><member name="M:Tva.DataEventArgs.#ctor(System.Byte[])">
	<summary>
 Initializes a new instance of the Tva.DataEventArgs class.
 </summary>
	<param name="data">The data that is being transferred.</param>
</member><member name="M:Tva.DataEventArgs.#ctor(System.Guid,System.Byte[])">
	<summary>
 Initializes a new instance of the Tva.DataEventArgs class.
 </summary>
	<param name="source">The source of the data.</param>
	<param name="data">The data that is being transferred.</param>
</member><member name="P:Tva.DataEventArgs.Source">
	<summary>
 Gets or sets the source of the data.
 </summary>
	<value></value>
	<returns>The source of the data.</returns>
</member><member name="P:Tva.DataEventArgs.Data">
	<summary>
 Gets or sets the data that is being transferred.
 </summary>
	<value></value>
	<returns>The data that is being transferred.</returns>
</member><member name="T:Tva.Collections.DictionaryList`2">
	<summary>This is essentially a sorted dictionary style list that implements IList</summary>
	<remarks>
		<para>
 Important note about using an "Integer" as the key for this class: IDictionary implementations
 do not normally implement the IList interface because of ambiguity that is caused when implementing
 an integer key.  For example, if you implement this class with a key of type "Integer" you will not
 be able to access items in the queue by index without "casting" the class as IList, this is because
 the Item property in both the IDictionary and IList would have the same parameters.
 </para>
	</remarks>
</member><member name="T:Tva.Measurements.MeasurementKey">
	<summary>Defines a primary key for a measurement</summary>
</member><member name="T:Tva.Collections.ProcessQueue`1.ProcessItemFunctionSignature">
	<summary>
 This is the function signature used for defining a method to process items one at a time
 </summary>
	<remarks>
		<para>Implementation of this function is required unless ProcessItemsFunction is implemented</para>
		<para>This function is used when creating a queue to process one item at a time</para>
		<para>Asynchronous queues will process individual items on multiple threads</para>
	</remarks>
	<param name="item">Item to be processed</param>
</member><member name="T:Tva.Collections.ProcessQueue`1.ProcessItemsFunctionSignature">
	<summary>
 This is the function signature used for defining a method to process multiple items at once
 </summary>
	<remarks>
		<para>Implementation of this function is required unless ProcessItemFunction is implemented</para>
		<para>This function is used when creating a queue to process multiple items at once</para>
		<para>Asynchronous queues will process groups of items on multiple threads</para>
	</remarks>
	<param name="items">Item to be processed</param>
</member><member name="T:Tva.Collections.ProcessQueue`1.CanProcessItemFunctionSignature">
	<summary>
 This is the function signature used for determining if an item can be currently processed
 </summary>
	<remarks>
		<para>Implementation of this function is optional; it will be assumed that an item can be processed if this function is not defined</para>
		<para>Items must eventually get to a state where they can be processed or they will remain in the queue forever</para>
		<para>
 Note that when this function is implemented and ProcessingStyle = ManyAtOnce (i.e., ProcessItemsFunction is defined)
 then each item presented for processing must evaluate as "CanProcessItem = True" before any items are processed
 </para>
	</remarks>
	<param name="item">Item to be checked for processing availablity</param>
	<returns>Function should return True if item can be processed</returns>
</member><member name="E:Tva.Collections.ProcessQueue`1.ItemProcessed">
	<summary>
 This event will be raised after an item has been successfully processed
 </summary>
	<param name="item">Reference to item that has been successfully processed</param>
	<remarks>
		<para>This event allows custom handling of successfully processed items</para>
		<para>When a process timeout is specified, this event allows you to know when the item completed processing in the allowed amount of time</para>
		<para>This function will only be raised when ProcessingStyle = OneAtATime (i.e., ProcessItemFunction is defined)</para>
	</remarks>
</member><member name="E:Tva.Collections.ProcessQueue`1.ItemsProcessed">
	<summary>
 This event will be raised after an array of items have been successfully processed
 </summary>
	<param name="items">Reference to items that have been successfully processed</param>
	<remarks>
		<para>This event allows custom handling of successfully processed items</para>
		<para>When a process timeout is specified, this event allows you to know when the item completed processing in the allowed amount of time</para>
		<para>This function will only be raised when ProcessingStyle = ManyAtOnce (i.e., ProcessItemsFunction is defined)</para>
	</remarks>
</member><member name="E:Tva.Collections.ProcessQueue`1.ItemTimedOut">
	<summary>
 This event will be raised if an item's processing time exceeds the specified process timeout
 </summary>
	<remarks>
		<para>This event allows custom handling of items that took too long to process</para>
		<para>This function will only be raised when ProcessingStyle = OneAtATime (i.e., ProcessItemFunction is defined)</para>
	</remarks>
	<param name="item">Reference to item that took too long to process</param>
</member><member name="E:Tva.Collections.ProcessQueue`1.ItemsTimedOut">
	<summary>
 This event will be raised if processing time for an array of items exceeds the specified process timeout
 </summary>
	<remarks>
		<para>This event allows custom handling of items that took too long to process</para>
		<para>This function will only be raised when ProcessingStyle = ManyAtOnce (i.e., ProcessItemsFunction is defined)</para>
	</remarks>
	<param name="items">Reference to items that took too long to process</param>
</member><member name="E:Tva.Collections.ProcessQueue`1.ProcessException">
	<summary>
 This event will be raised if there is an exception encountered while attempting to processing an item in the list
 </summary>
	<remarks>
 Processing won't stop for any exceptions thrown by the user function, but any captured exceptions will be exposed through this event
 </remarks>
</member><member name="F:Tva.Collections.ProcessQueue`1.DefaultProcessInterval">
	<summary>Default processing interval (in milliseconds)</summary>
</member><member name="F:Tva.Collections.ProcessQueue`1.DefaultMaximumThreads">
	<summary>Default maximum number of processing threads</summary>
</member><member name="F:Tva.Collections.ProcessQueue`1.DefaultProcessTimeout">
	<summary>Default processing timeout (in milliseconds)</summary>
</member><member name="F:Tva.Collections.ProcessQueue`1.DefaultRequeueOnTimeout">
	<summary>Default setting for requeuing items on processing timeout</summary>
</member><member name="F:Tva.Collections.ProcessQueue`1.DefaultRequeueOnException">
	<summary>Default setting for requeuing items on processing exceptions</summary>
</member><member name="F:Tva.Collections.ProcessQueue`1.RealTimeProcessInterval">
	<summary>Default real-time processing interval (in milliseconds)</summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature)">
	<summary>
 Create a new asynchronous process queue with the default settings: ProcessInterval = 100, MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new asynchronous process queue with the default settings: ProcessInterval = 100, MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,System.Int32)">
	<summary>
 Create a new asynchronous process queue with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Int32)">
	<summary>
 Create a new asynchronous process queue with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new asynchronous process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new asynchronous process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateSynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature)">
	<summary>
 Create a new synchronous process queue (i.e., single process thread) with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateSynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new synchronous process queue (i.e., single process thread) with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateSynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new synchronous process queue (i.e., single process thread) using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateSynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new synchronous process queue (i.e., single process thread) using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateRealTimeQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature)">
	<summary>
 Create a new real-time process queue with the default settings: ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateRealTimeQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new real-time process queue with the default settings: ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateRealTimeQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new real-time process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateRealTimeQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new real-time process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature)">
	<summary>
 Create a new asynchronous bulk-item process queue with the default settings: ProcessInterval = 100, MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new asynchronous bulk-item process queue with the default settings: ProcessInterval = 100, MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,System.Int32)">
	<summary>
 Create a new asynchronous bulk-item process queue with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Int32)">
	<summary>
 Create a new asynchronous bulk-item process queue with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new asynchronous bulk-item process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateAsynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new asynchronous bulk-item process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateSynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature)">
	<summary>
 Create a new synchronous bulk-item process queue (i.e., single process thread) with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateSynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new synchronous bulk-item process queue (i.e., single process thread) with the default settings: ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateSynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new synchronous bulk-item process queue (i.e., single process thread) using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateSynchronousQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new synchronous bulk-item process queue (i.e., single process thread) using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateRealTimeQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature)">
	<summary>
 Create a new real-time bulk-item process queue with the default settings: ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateRealTimeQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
	<summary>
 Create a new real-time bulk-item process queue with the default settings: ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateRealTimeQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new real-time bulk-item process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CreateRealTimeQueue(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Create a new real-time bulk-item process queue using the specified settings
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.#ctor(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 This constructor creates a ProcessQueue based on the generic List(Of T) class
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.#ctor(Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 This constructor creates a bulk-item ProcessQueue based on the generic List(Of T) class
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.#ctor(Tva.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,Tva.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,Tva.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Collections.Generic.IList{`0},System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 This constructor allows derived classes to define their own IList instance if desired
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.ProcessItemFunction">
	<summary>
 This property defines the user function used to process items in the list one at a time
 </summary>
	<remarks>
		<para>This function and ProcessItemsFunction cannot be defined at the same time</para>
		<para>A queue must be defined to process a single item at a time or many items at once</para>
		<para>Implementation of this function makes ProcessingStyle = OneAtATime</para>
	</remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.ProcessItemsFunction">
	<summary>
 This property defines the user function used to process multiple items in the list at once
 </summary>
	<remarks>
		<para>This function and ProcessItemFunction cannot be defined at the same time</para>
		<para>A queue must be defined to process a single item at a time or many items at once</para>
		<para>Implementation of this function makes ProcessingStyle = ManyAtOnce</para>
	</remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.CanProcessItemFunction">
	<summary>
 This property defines the user function used to determine if an item is ready to be processed
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.ProcessingIsRealTime">
	<summary>
 This property determines if items will be processed in real-time
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.ThreadingMode">
	<summary>
 This property returns the current threading mode for the process queue (i.e., synchronous or asynchronous)
 </summary>
	<remarks>
		<para>The maximum number of processing threads determines the threading mode</para>
		<para>If the maximum threads are set to one, item processing will be synchronous (i.e., ThreadingMode = Synchronous)</para>
		<para>If the maximum threads are more than one, item processing will be asynchronous (i.e., ThreadingMode = Asynchronous)</para>
		<para>
 Note that for asynchronous queues the processing interval will control how many threads are spawned
 at once.  If items are processed faster than the specified processing interval, only one process thread
 will ever be spawned at a time.  To ensure multiple threads are utilized to process queue items, lower
 the process interval (minimum process interval is 1 millisecond).
 </para>
	</remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.ProcessingStyle">
	<summary>
 This property determines the item processing style for the process queue (i.e., one at a time or many at once)
 </summary>
	<remarks>
		<para>The implemented item processing function determines the processing style</para>
		<para>If the ProcessItemFunction is implemented, the processing style will be one at a time (i.e., ProcessingStyle = OneAtATime)</para>
		<para>If the ProcessItemsFunction is implemented, the processing style will be many at once (i.e., ProcessingStyle = ManyAtOnce)</para>
		<para>
 Note that if the processing style is many at once, all available items in the queue are presented for processing
 at each processing interval.  If you expect items to be processed in the order in which they were received, make
 sure you use a synchronous queue.  Real-time queues are inheriently synchronous.
 </para>
	</remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.ProcessInterval">
	<summary>
 This property defines the interval, in milliseconds, on which new items begin processing
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.MaximumThreads">
	<summary>
 Defines the maximum number of threads to process simultaneously
 </summary>
	<value>Sets the maximum number of processing threads</value>
	<returns>Maximum number of processing threads</returns>
	<remarks>If you set maximum threads to one, item processing will be synchronous (i.e., ThreadingMode = Synchronous)</remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.ProcessTimeout">
	<summary>
 Defines the maximum time, in milliseconds, allowed for processing an item
 </summary>
	<value>Sets the maximum number of milliseconds allowed to process an item</value>
	<returns>Maximum number of milliseconds allowed to process an item</returns>
	<remarks>Set to Timeout.Infinite (i.e., -1) to allow processing to take as long as needed</remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.RequeueOnTimeout">
	<summary>
 This property determines whether or not to automatically place an item back into the list if the processing times out
 </summary>
	<remarks>This property is ignored if the ProcessTimeout is set to Timeout.Infinite (i.e., -1)</remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.RequeueOnException">
	<summary>
 This property determines whether or not to automatically place an item back into the list if an exception occurs while processing
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.DebugMode">
	<summary>
 This property determines whether or not process queue will be in debug mode when handling exceptions
 </summary>
	<value>Set to True to enable debug mode</value>
	<returns>True if debug mode is enabled, False otherwise</returns>
	<remarks>
 When debug mode is True, all internal "Catch ex As Exception" statements will be ignored allowing development
 environment to stop directly on line of code that threw the exception (e.g., in user's process item function)
 </remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.Start">
	<summary>
 Starts item processing
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.Stop">
	<summary>
 Stops item processing
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.Enabled">
	<summary>
 Determines if the list is currently enabled
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.Processing">
	<summary>
 Determines if the list is actively processing items
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.TotalProcessedItems">
	<summary>
 Returns the total number of items processed so far
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.ThreadCount">
	<summary>
 Returns the current number of active threads
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.RunTime">
	<summary>
 Returns the total amount of time, in seconds, that the process list has been active
 </summary>
</member><member name="P:Tva.Collections.ProcessQueue`1.RealTimeProcessThreadPriority">
	<summary>
 Allows adjustment of real-time process thread priority
 </summary>
	<remarks>
 This only affects real-time queues.  Changes to thread priority will only take effect when set before calling the "Start" method.
 </remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.Name">
	<summary>
 Returns class name
 </summary>
	<remarks>
		<para>This name is used for class identification in strings (e.g., used in error message)</para>
		<para>Derived classes should override this method with a proper class name</para>
	</remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.Status">
	<summary>
 Returns current status of processing queue
 </summary>
	<remarks>
 This is useful for checking on the current status of the queue
 </remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.InternalList">
	<summary>
 This property allows derived classes to access the interfaced internal process queue directly
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.DataAdded">
	<summary>
 This method is used to let the class know that data was added so it can begin processing data
 </summary>
	<remarks>
		<para>
 Derived classes *must* make sure to call this method after data gets added so that the
 process timer can be enabled for intervaled queues and data processing can begin
 </para>
		<para>
 To make sure items in the queue always get processed, this function is expected to be
 invoked from within a SyncLock of the exposed SyncRoot (i.e., m_processQueue)
 </para>
	</remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.IncrementThreadCount">
	<summary>
 Performs thread-safe atomic increment on active thread count
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.DecrementThreadCount">
	<summary>
 Performs thread-safe atomic decrement on active thread count
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.IncrementItemsProcessed">
	<summary>
 Performs thread-safe atomic increment on total processed items count
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.IncrementItemsProcessed(System.Int32)">
	<summary>
 Performs thread-safe atomic addition on total processed items count
 </summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.CanProcessItem(`0)">
	<summary>
 Determines if an item can be processed
 </summary>
	<remarks>
		<para>
 If user provided no implementation for the CanProcessItemFunction, we assume item can be processed
 </para>
		<para>
 You should use this function instead of invoking the CanProcessItemFunction pointer
 directly since implementation of this delegate is optional
 </para>
	</remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.CanProcessItems(`0[])">
	<summary>
 Determines if all items can be processed
 </summary>
	<remarks>
		<para>
 If user provided no implementation for the CanProcessItemFunction, we assume all items can be processed
 </para>
		<para>
 You should use this function instead of invoking the CanProcessItemFunction pointer
 directly since implementation of this delegate is optional
 </para>
	</remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.RaiseItemProcessed(`0)">
	<summary>
 Raises the base class ItemProcessed event
 </summary>
	<remarks>
 Derived classes can't raise events of their base classes so we expose event wrapper methods to accomodate as needed
 </remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.RaiseItemsProcessed(`0[])">
	<summary>
 Raises the base class ItemsProcessed event
 </summary>
	<remarks>
 Derived classes can't raise events of their base classes so we expose event wrapper methods to accomodate as needed
 </remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.RaiseItemTimedOut(`0)">
	<summary>
 Raises the base class ItemTimedOut event
 </summary>
	<remarks>
 Derived classes can't raise events of their base classes so we expose event wrapper methods to accomodate as needed
 </remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.RaiseItemsTimedOut(`0[])">
	<summary>
 Raises the base class ItemsTimedOut event
 </summary>
	<remarks>
 Derived classes can't raise events of their base classes so we expose event wrapper methods to accomodate as needed
 </remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.RaiseProcessException(System.Exception)">
	<summary>
 Raises the base class ProcessException event
 </summary>
	<remarks>
 Derived classes can't raise events of their base classes so we expose event wrapper methods to accomodate as needed
 </remarks>
</member><member name="M:Tva.Collections.ProcessQueue`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
	<summary>
 Adds the elements of the specified collection to the end of the queue.
 </summary>
	<param name="collection">
 The collection whose elements should be added to the end of the queue.
 The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.
 </param>
	<exception cref="T:System.ArgumentNullException">collection is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.BinarySearch(`0)">
	<summary>
 Searches the entire sorted queue using a binary search algorithm for an element using the
 default comparer and returns the zero-based index of the element.
 </summary>
	<remarks>
 Queue must be sorted in order for this function to return an accurate result
 </remarks>
	<param name="item">The object to locate. The value can be null for reference types.</param>
	<returns>
 The zero-based index of item in the sorted queue, if item is found; otherwise, a negative number that is the
 bitwise complement of the index of the next element that is larger than item or, if there is no larger element,
 the bitwise complement of count.
 </returns>
	<exception cref="T:System.InvalidOperationException">The default comparer, Generic.Comparer.Default, cannot find an implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
	<summary>
 Searches the entire sorted queue using a binary search algorithm for an element using the
 specified comparer and returns the zero-based index of the element.
 </summary>
	<remarks>
 Queue must be sorted in order for this function to return an accurate result
 </remarks>
	<param name="item">The object to locate. The value can be null for reference types.</param>
	<param name="comparer">The Generic.IComparer implementation to use when comparing elements -or- null to use the default comparer: Generic.Comparer(Of T).Default</param>
	<returns>
 The zero-based index of item in the sorted queue, if item is found; otherwise, a negative number that is the
 bitwise complement of the index of the next element that is larger than item or, if there is no larger element,
 the bitwise complement of count.
 </returns>
	<exception cref="T:System.InvalidOperationException">The default comparer, Generic.Comparer.Default, cannot find an implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
	<summary>
 Searches a range of elements in the sorted queue using a binary search algorithm for an
 element using the specified comparer and returns the zero-based index of the element.
 </summary>
	<remarks>
 Queue must be sorted in order for this function to return an accurate result
 </remarks>
	<param name="index">The zero-based starting index of the range to search.</param>
	<param name="count">The length of the range to search.</param>
	<param name="item">The object to locate. The value can be null for reference types.</param>
	<param name="comparer">The Generic.IComparer implementation to use when comparing elements -or- null to use the default comparer: Generic.Comparer(Of T).Default</param>
	<returns>
 The zero-based index of item in the sorted queue, if item is found; otherwise, a negative number that is the
 bitwise complement of the index of the next element that is larger than item or, if there is no larger element,
 the bitwise complement of count.
 </returns>
	<exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the queue -or- count is less than 0 -or- startIndex and count do not specify a valid section in the queue</exception>
	<exception cref="T:System.InvalidOperationException">The default comparer, Generic.Comparer.Default, cannot find an implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.ConvertAll``1(System.Converter{`0,``0})">
	<summary>Converts the elements in the current queue to another type, and returns a list containing the converted elements.</summary>
	<returns>A generic list of the target type containing the converted elements from the current queue.</returns>
	<param name="converter">A Converter delegate that converts each element from one type to another type.</param>
	<exception cref="T:System.ArgumentNullException">converter is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Exists(System.Predicate{`0})">
	<summary>Determines whether the queue contains elements that match the conditions defined by the specified predicate.</summary>
	<returns>true if the queue contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
	<param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Find(System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire queue.</summary>
	<returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
	<param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.FindAll(System.Predicate{`0})">
	<summary>Retrieves the all the elements that match the conditions defined by the specified predicate.</summary>
	<returns>A generic list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty list.</returns>
	<param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.FindIndex(System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the queue that extends from the specified index to the last element.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.FindIndex(System.Int32,System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the queue that extends from the specified index to the last element.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="startIndex">The zero-based starting index of the search.</param>
	<param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the queue.</exception>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the queue that extends from the specified index to the last element.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="startIndex">The zero-based starting index of the search.</param>
	<param name="count">The number of elements in the section to search.</param>
	<param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the queue -or- count is less than 0 -or- startIndex and count do not specify a valid section in the queue</exception>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.FindLast(System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire queue.</summary>
	<returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
	<param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.FindLastIndex(System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire queue.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.FindLastIndex(System.Int32,System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the queue that extends from the first element to the specified index.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="startIndex">The zero-based starting index of the backward search.</param>
	<param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the queue.</exception>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the queue that contains the specified number of elements and ends at the specified index.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="startIndex">The zero-based starting index of the backward search.</param>
	<param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the queue -or- count is less than 0 -or- startIndex and count do not specify a valid section in the queue.</exception>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.ForEach(System.Action{`0})">
	<summary>Performs the specified action on each element of the queue.</summary>
	<param name="action">The Action delegate to perform on each element of the queue.</param>
	<exception cref="T:System.ArgumentNullException">action is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.GetRange(System.Int32,System.Int32)">
	<summary>Creates a shallow copy of a range of elements in the source queue.</summary>
	<returns>A shallow copy of a range of elements in the source queue.</returns>
	<param name="count">The number of elements in the range.</param>
	<param name="index">The zero-based queue index at which the range starts.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- count is less than 0.</exception>
	<exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the queue.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.IndexOf(`0,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the queue that extends from the specified index to the last element.</summary>
	<returns>The zero-based index of the first occurrence of item within the range of elements in the queue that extends from index to the last element, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the queue. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the queue.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.IndexOf(`0,System.Int32,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the queue that starts at the specified index and contains the specified number of elements.</summary>
	<returns>The zero-based index of the first occurrence of item within the range of elements in the queue that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="item">The object to locate in the queue. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the queue -or- count is less than 0 -or- index and count do not specify a valid section in the queue.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
	<summary>Inserts the elements of a collection into the queue at the specified index.</summary>
	<param name="collection">The collection whose elements should be inserted into the queue. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
	<param name="index">The zero-based index at which the new elements should be inserted.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- index is greater than queue length.</exception>
	<exception cref="T:System.ArgumentNullException">collection is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.LastIndexOf(`0)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire queue.</summary>
	<returns>The zero-based index of the last occurrence of item within the entire the queue, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the queue. The value can be null for reference types.</param>
</member><member name="M:Tva.Collections.ProcessQueue`1.LastIndexOf(`0,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the queue that extends from the first element to the specified index.</summary>
	<returns>The zero-based index of the last occurrence of item within the range of elements in the queue that extends from the first element to index, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the queue. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the backward search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the queue. </exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.LastIndexOf(`0,System.Int32,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the queue that contains the specified number of elements and ends at the specified index.</summary>
	<returns>The zero-based index of the last occurrence of item within the range of elements in the queue that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the queue. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the backward search.</param>
	<param name="count">The number of elements in the section to search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the queue -or- count is less than 0 -or- index and count do not specify a valid section in the queue.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.RemoveAll(System.Predicate{`0})">
	<summary>Removes the all the elements that match the conditions defined by the specified predicate.</summary>
	<returns>The number of elements removed from the queue .</returns>
	<param name="match">The Predicate delegate that defines the conditions of the elements to remove.</param>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.RemoveRange(System.Int32,System.Int32)">
	<summary>Removes a range of elements from the queue.</summary>
	<param name="count">The number of elements to remove.</param>
	<param name="index">The zero-based starting index of the range of elements to remove.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- count is less than 0.</exception>
	<exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the queue.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Reverse">
	<summary>Reverses the order of the elements in the entire queue.</summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.Reverse(System.Int32,System.Int32)">
	<summary>Reverses the order of the elements in the specified range.</summary>
	<param name="count">The number of elements in the range to reverse.</param>
	<param name="index">The zero-based starting index of the range to reverse.</param>
	<exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the queue. </exception>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- count is less than 0.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Sort">
	<summary>Sorts the elements in the entire queue using the default comparer.</summary>
	<exception cref="T:System.InvalidOperationException">The default comparer, Generic.Comparer.Default, cannot find an implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Sort(System.Collections.Generic.IComparer{`0})">
	<summary>Sorts the elements in the entire queue using the specified comparer.</summary>
	<param name="comparer">The Generic.IComparer implementation to use when comparing elements, or null to use the default comparer: Generic.Comparer.Default.</param>
	<exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
	<exception cref="T:System.InvalidOperationException">the comparer is null and the default comparer, Generic.Comparer.Default, cannot find an implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
	<summary>Sorts the elements in a range of elements in the queue using the specified comparer.</summary>
	<param name="count">The length of the range to sort.</param>
	<param name="index">The zero-based starting index of the range to sort.</param>
	<param name="comparer">The Generic.IComparer implementation to use when comparing elements, or null to use the default comparer: Generic.Comparer.Default.</param>
	<exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
	<exception cref="T:System.InvalidOperationException">the comparer is null and the default comparer, Generic.Comparer.Default, cannot find an implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- count is less than 0.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Sort(System.Comparison{`0})">
	<summary>Sorts the elements in the entire queue using the specified Comparison.</summary>
	<param name="comparison">The Comparison to use when comparing elements.</param>
	<exception cref="T:System.ArgumentException">The implementation of comparison caused an error during the sort. For example, comparison might not return 0 when comparing an item with itself.</exception>
	<exception cref="T:System.ArgumentNullException">comparison is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.ToArray">
	<summary>Copies the elements of the queue to a new array.</summary>
	<returns>An array containing copies of the elements of the queue.</returns>
</member><member name="M:Tva.Collections.ProcessQueue`1.TrueForAll(System.Predicate{`0})">
	<summary>Determines whether every element in the queue matches the conditions defined by the specified predicate.</summary>
	<returns>true if every element in the queue matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
	<param name="match">The Predicate delegate that defines the conditions to check against the elements.</param>
	<exception cref="T:System.ArgumentNullException">match is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Push(`0)">
	<summary>Inserts an item onto the top of the queue</summary>
	<param name="item">The item to push onto the queue.</param>
</member><member name="M:Tva.Collections.ProcessQueue`1.Pop">
	<summary>Removes the first item from the queue and returns its value</summary>
	<exception cref="T:System.IndexOutOfRangeException">there are no items in the queue</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Poop">
	<summary>Removes the last item from the queue and returns its value</summary>
	<exception cref="T:System.IndexOutOfRangeException">there are no items in the queue</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.Add(`0)">
	<summary>Adds an item to the queue.</summary>
	<param name="item">The item to add to the queue.</param>
</member><member name="M:Tva.Collections.ProcessQueue`1.Insert(System.Int32,`0)">
	<summary>Inserts an element into the queue at the specified index.</summary>
	<param name="item">The object to insert. The value can be null for reference types.</param>
	<param name="index">The zero-based index at which item should be inserted.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- index is greater than queue length.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.CopyTo(`0[],System.Int32)">
	<summary>Copies the entire queue to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
	<param name="array">The one-dimensional array that is the destination of the elements copied from queue. The array must have zero-based indexing.</param>
	<param name="arrayIndex">The zero-based index in array at which copying begins.</param>
	<exception cref="T:System.ArgumentException">arrayIndex is equal to or greater than the length of array -or- the number of elements in the source queue is greater than the available space from arrayIndex to the end of the destination array.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
	<exception cref="T:System.ArgumentNullException">array is null.</exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.GetEnumerator">
	<summary>Returns an enumerator that iterates through the queue.</summary>
	<returns>An enumerator for the queue.</returns>
</member><member name="P:Tva.Collections.ProcessQueue`1.Item(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<returns>The element at the specified index.</returns>
	<param name="index">The zero-based index of the element to get or set.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- index is equal to or greater than queue length. </exception>
</member><member name="M:Tva.Collections.ProcessQueue`1.IndexOf(`0)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire queue.</summary>
	<returns>The zero-based index of the first occurrence of item within the entire queue, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the queue. The value can be null for reference types.</param>
</member><member name="P:Tva.Collections.ProcessQueue`1.Count">
	<summary>Gets the number of elements actually contained in the queue.</summary>
	<returns>The number of elements actually contained in the queue.</returns>
</member><member name="M:Tva.Collections.ProcessQueue`1.Clear">
	<summary>Removes all elements from the queue.</summary>
</member><member name="M:Tva.Collections.ProcessQueue`1.Contains(`0)">
	<summary>Determines whether an element is in the queue.</summary>
	<returns>true if item is found in the queue; otherwise, false.</returns>
	<param name="item">The object to locate in the queue. The value can be null for reference types.</param>
</member><member name="M:Tva.Collections.ProcessQueue`1.Remove(`0)">
	<summary>Removes the first occurrence of a specific object from the queue.</summary>
	<returns>true if item is successfully removed; otherwise, false.  This method also returns false if item was not found in the queue.</returns>
	<param name="item">The object to remove from the queue. The value can be null for reference types.</param>
</member><member name="M:Tva.Collections.ProcessQueue`1.RemoveAt(System.Int32)">
	<summary>Removes the element at the specified index of the queue.</summary>
	<param name="index">The zero-based index of the element to remove.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- index is equal to or greater than queue length.</exception>
</member><member name="P:Tva.Collections.ProcessQueue`1.IsReadOnly">
	<summary>Gets a value indicating whether the queue is read-only.</summary>
	<returns>true if the queue is read-only; otherwise, false.  In the default implementation, this property always returns false.</returns>
</member><member name="P:Tva.Collections.ProcessQueue`1.SyncRoot">
	<summary>Gets an object that can be used to synchronize access to the queue.</summary>
	<returns>An object that can be used to synchronize access to the queue.  In the default implementation, this property always returns the current instance.</returns>
	<remarks>
 Note that all the methods of this class are already individually synchronized, however to safely enumerate through each queue element 
 (i.e., to make sure list elements don't change during enumeration), derived classes and end users should perform their own
 synchronization by implementing a SyncLock using this SyncRoot property
 </remarks>
</member><member name="P:Tva.Collections.ProcessQueue`1.IsSynchronized">
	<summary>Gets a value indicating whether access to the queue is synchronized (thread safe).</summary>
	<returns>true if access to the queue is synchronized (thread safe); otherwise, false.  In the default implementation, this property always returns true.</returns>
	<remarks>This queue is effectively "synchronized" since all functions synclock operations internally</remarks>
</member><member name="T:Tva.Collections.ProcessQueue`1">
	<summary>
		<para>This class will process a collection of items on independent threads.</para>
		<para>Consumer must implement a function to process items.</para>
	</summary>
	<typeparam name="T">Type of object to process</typeparam>
	<remarks>
		<para>This class acts as a strongly typed collection of objects to be processed.</para>
		<para>Consumers are expected to create new instances of this class through the static construction functions (e.g., CreateAsynchronousQueue, CreateSynchronousQueue, etc.)</para>
		<para>Note that the queue will not start processing until the Start method is called.</para>
	</remarks>
</member><member name="E:Tva.IO.LogFile.LogException">
	<summary>Exception notification event</summary>
	<param name="ex">Exception thrown during logging attempt</param>
	<remarks>
 We don't stop for exceptions in this class, but will expose them if the end user wishes
 to know about any issues incurred while trying to log data
 </remarks>
</member><member name="M:Tva.IO.LogFile.Append(System.String)">
	<summary>Add new log entry to the queue.</summary>
	<param name="status">Message to add to the log</param>
	<remarks>
		<para>
 Note that as soon as the item is added to the queue the function will return so that no
 time is wasted on the calling thread.
 </para>
		<para>
 Processing occurs on a set interval (the default is 100 milliseconds) - so any more log
 entires added in this time will be processed as well.
 </para>
	</remarks>
</member><member name="M:Tva.IO.LogFile.AppendLine(System.String)">
	<summary>Add new log entry to the queue.</summary>
	<param name="status">Message to add to the log</param>
	<remarks>A "newline" character will automatically be appended to the specified message</remarks>
</member><member name="M:Tva.IO.LogFile.AppendTimestampedLine(System.String)">
	<summary>Add new log entry to the queue.</summary>
	<param name="status">Message to add to the log</param>
	<remarks>
		<para>A timestamp will automatically be preprended to the specified message</para>
		<para>A "newline" character will automatically be appended to the specified message</para>
	</remarks>
</member><member name="M:Tva.IO.LogFile.ToString">
	<summary>Reads entire log file into a string</summary>
	<returns>Log file contents</returns>
	<remarks>NOTE: This should only be called when the log file is known to be of reasonable size</remarks>
</member><member name="T:Tva.IO.LogFile">
	<summary>This implements a simple multi-thread-happy log file class</summary>
</member><member name="M:Tva.Math.CompositeValues.#ctor(System.Int32)">
	<summary>This constructor creates a new instance of the CompositeValues class specifing the total number of composite values to track.</summary>
	<param name="count">Total number of composite values to track</param>
</member><member name="P:Tva.Math.CompositeValues.Value(System.Int32)">
	<summary>Gets or sets the composite value at the specified index in composite value collection.</summary>
	<param name="index">The zero-based index of the composite value to get or set</param>
	<returns>The composite value at the specified index in composite value collection</returns>
</member><member name="P:Tva.Math.CompositeValues.Received(System.Int32)">
	<summary>Gets a boolean value indicating if composite value at the specified index is received.</summary>
	<param name="index">The zero-based index of the composite value.</param>
	<returns>True if composite value at the specified index is received; otherwise, False.</returns>
</member><member name="P:Tva.Math.CompositeValues.Count">
	<summary>Gets the number of compisite values in the composite value collection.</summary>
	<returns>To be provided.</returns>
</member><member name="P:Tva.Math.CompositeValues.AllReceived">
	<summary>Gets a boolean value indicating if all composite values are received.</summary>
	<returns>True if all composite values are received; otherwise, False.</returns>
</member><member name="T:Tva.Math.CompositeValues">
	<summary>Class to temporarily cache composite values until all values been received so that a compound value can be created.</summary>
</member><member name="P:Tva.Measurements.Measurement.This">
	<summary>Handy instance reference to self</summary>
</member><member name="M:Tva.Measurements.Measurement.Clone(Tva.Measurements.IMeasurement)">
	<summary>Creates a copy of the specified measurement</summary>
</member><member name="M:Tva.Measurements.Measurement.Clone(Tva.Measurements.IMeasurement,System.Int64)">
	<summary>Creates a copy of the specified measurement using a new timestamp</summary>
</member><member name="M:Tva.Measurements.Measurement.Clone(Tva.Measurements.IMeasurement,System.Double,System.Int64)">
	<summary>Creates a copy of the specified measurement using a new value and timestamp</summary>
</member><member name="P:Tva.Measurements.Measurement.ID">
	<summary>Gets or sets the numeric ID of this measurement</summary>
	<remarks>
		<para>In most implementations, this will be a required field</para>
		<para>Note that this field, in addition to Source, typically creates the primary key for a measurement</para>
	</remarks>
</member><member name="P:Tva.Measurements.Measurement.Source">
	<summary>Gets or sets the source of this measurement</summary>
	<remarks>
		<para>In most implementations, this will be a required field</para>
		<para>Note that this field, in addition to ID, typically creates the primary key for a measurement</para>
		<para>This value is typically used to track the archive name in which measurement is stored</para>
	</remarks>
</member><member name="P:Tva.Measurements.Measurement.Key">
	<summary>Returns the primary key of this measurement</summary>
</member><member name="P:Tva.Measurements.Measurement.Tag">
	<summary>Gets or sets the text based ID of this measurement</summary>
</member><member name="P:Tva.Measurements.Measurement.Value">
	<summary>Gets or sets the raw measurement value that is not offset by adder and multiplier</summary>
	<returns>Raw value of this measurement (i.e., value that is not offset by adder and multiplier)</returns>
</member><member name="P:Tva.Measurements.Measurement.AdjustedValue">
	<summary>Returns the adjusted numeric value of this measurement</summary>
	<remarks>Note that returned value will be offset by adder and multiplier</remarks>
	<returns>Value offset by adder and multipler (i.e., Value * Multiplier + Adder)</returns>
</member><member name="P:Tva.Measurements.Measurement.Adder">
	<summary>Defines an offset to add to the measurement value - defaults to zero</summary>
</member><member name="P:Tva.Measurements.Measurement.Multiplier">
	<summary>Defines a mulplicative offset to add to the measurement value - defaults to one</summary>
</member><member name="P:Tva.Measurements.Measurement.Ticks">
	<summary>Gets or sets exact timestamp of the data represented by this measurement</summary>
	<remarks>The value of this property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001</remarks>
</member><member name="P:Tva.Measurements.Measurement.Timestamp">
	<summary>Date representation of ticks of this measurement</summary>
</member><member name="P:Tva.Measurements.Measurement.ValueQualityIsGood">
	<summary>Determines if the quality of the numeric value of this measurement is good</summary>
</member><member name="P:Tva.Measurements.Measurement.TimestampQualityIsGood">
	<summary>Determines if the quality of the timestamp of this measurement is good</summary>
</member><member name="M:Tva.Measurements.Measurement.CompareTo(System.Object)">
	<summary>This implementation of a basic measurement compares itself by value</summary>
</member><member name="M:Tva.Measurements.Measurement.CompareTo(Tva.Measurements.IMeasurement)">
	<summary>This implementation of a basic measurement compares itself by value</summary>
</member><member name="M:Tva.Measurements.Measurement.Equals(Tva.Measurements.IMeasurement)">
	<summary>Returns True if the value of this measurement equals the value of the specified other measurement</summary>
</member><member name="T:Tva.Measurements.Measurement">
	<summary>Implementation of a basic measured value</summary>
</member><member name="M:Tva.Interop.IniFile.#ctor">
	<summary>Creates a new instance of IniFile class</summary>
	<remarks>Ini file name defaults to "Win.ini" - change using FileName property</remarks>
</member><member name="M:Tva.Interop.IniFile.#ctor(System.String)">
	<summary>Creates a new instance of IniFile class using the specified INI file name</summary>
</member><member name="P:Tva.Interop.IniFile.FileName">
	<summary>File name of the INI file</summary>
</member><member name="P:Tva.Interop.IniFile.KeyValue(System.String,System.String,System.String)">
	<summary>Gets the value of the specified key</summary>
	<param name="section">Section key exists in</param>
	<param name="entry">Name of key</param>
	<param name="defaultValue">Default value of key</param>
	<returns>Value of key</returns>
	<remarks>This is the default member of this class</remarks>
</member><member name="P:Tva.Interop.IniFile.KeyValue(System.String,System.String)">
	<summary>Sets the value of the specified key</summary>
	<param name="section">Section key exists in</param>
	<param name="entry">Name of key</param>
	<value>The new key value to store in the INI file</value>
	<remarks>This is the default member of this class</remarks>
</member><member name="P:Tva.Interop.IniFile.SectionNames">
	<summary>Returns a string array of section names in the INI file</summary>
</member><member name="T:Tva.Interop.IniFile">
	<summary>Old style Windows INI file manipulation class</summary>
</member><member name="M:Tva.IO.FilePath.ConnectToNetworkShare(System.String,System.String,System.String,System.String)">
	<summary>Connects to a network share with the specified user's credentials.</summary>
	<param name="sharename">UNC share name to connect to</param>
	<param name="username">Username to use for connection</param>
	<param name="password">Password to use for connection</param>
	<param name="domain">Domain name to use for connetion - specify computer name for local system accounts</param>
</member><member name="M:Tva.IO.FilePath.DisconnectFromNetworkShare(System.String)">
	<summary>Disconnects the specified network share.</summary>
	<param name="sharename">UNC share name to disconnect from</param>
</member><member name="M:Tva.IO.FilePath.DisconnectFromNetworkShare(System.String,System.Boolean)">
	<summary>Disconnects the specified network share.</summary>
	<param name="sharename">UNC share name to disconnect from</param>
	<param name="force">Set to True force disconnect</param>
</member><member name="M:Tva.IO.FilePath.IsFilePatternMatch(System.String[],System.String,System.Boolean)">
	<summary>Returns True if specified file name matches any of the given file specs (wildcards are defined as '*' or '?' characters).</summary>
</member><member name="M:Tva.IO.FilePath.IsFilePatternMatch(System.String,System.String,System.Boolean)">
	<summary>Returns True if specified file name matches given file spec (wildcards are defined as '*' or '?' characters).</summary>
</member><member name="M:Tva.IO.FilePath.GetFilePatternRegularExpression(System.String)">
	<summary>Returns a regular expression that simulates wildcard matching for filenames (wildcards are defined as '*' or '?' characters)</summary>
</member><member name="M:Tva.IO.FilePath.GetFileLength(System.String)">
	<summary>Get the size of the specified file.</summary>
	<param name="fileName">Name of file whose size is to be returned.</param>
	<returns>The size of the specified file.</returns>
</member><member name="M:Tva.IO.FilePath.GetTempFile">
	<summary>Gets a unique temporary file name with path.</summary>
</member><member name="M:Tva.IO.FilePath.GetTempFile(System.Boolean,System.Boolean,System.String)">
	<summary>Gets a unique temporary file name with path - if UseTempPath is False, application path is used for temp file.</summary>
</member><member name="M:Tva.IO.FilePath.GetTempFileName">
	<summary>Gets a file name (with .tmp extension) guaranteed to be unique with no path.</summary>
</member><member name="M:Tva.IO.FilePath.GetTempFileName(System.String)">
	<summary>Gets a file name guaranteed to be unique with no path.</summary>
	<param name="fileExtension">The extension of the temporary file.</param>
	<returns>The file name guaranteed to be unique with no path.</returns>
	<remarks>Use GetTempFile to return unique file name with path.</remarks>
</member><member name="M:Tva.IO.FilePath.GetTempFilePath">
	<summary>Gets the temporary file path - path will be suffixed with standard directory separator.</summary>
	<returns>The temporary file path.</returns>
</member><member name="M:Tva.IO.FilePath.GetApplicationPath">
	<summary>Gets the path of the executing assembly - path will be suffixed with standard directory separator.</summary>
	<returns>The path of the executing assembly.</returns>
</member><member name="M:Tva.IO.FilePath.JustDrive(System.String)">
	<summary>Returns just the drive letter (or UNC \\server\share\) from a path") - path will be suffixed with standard directory separator.</summary>
</member><member name="M:Tva.IO.FilePath.JustFileName(System.String)">
	<summary>Returns just the file name from a path.</summary>
</member><member name="M:Tva.IO.FilePath.LastDirectoryName(System.String)">
	<summary>Returns last directory name from a path (e.g., would return sub2 from c:\windows\sub2\filename.ext).</summary>
</member><member name="M:Tva.IO.FilePath.JustPath(System.String)">
	<summary>Returns just the path without a filename from a path - path will be suffixed with standard directory separator.</summary>
</member><member name="M:Tva.IO.FilePath.JustFileExtension(System.String)">
	<summary>Returns just the file extension from a path - keeps extension "dot".</summary>
</member><member name="M:Tva.IO.FilePath.NoFileExtension(System.String)">
	<summary>Returns just the file name with no extension from a path.</summary>
</member><member name="M:Tva.IO.FilePath.AddPathSuffix(System.String)">
	<summary>Makes sure path is suffixed with standard directory separator.</summary>
</member><member name="M:Tva.IO.FilePath.RemovePathSuffix(System.String)">
	<summary>Makes sure path is not suffixed with any directory separator.</summary>
</member><member name="M:Tva.IO.FilePath.TrimFileName(System.String,System.Int32)">
	<summary>Returns a file name for display purposes of the specified length using "..." to indicate a longer name</summary>
	<remarks>
		<para>Minimum value for the <paramref name="length"/> parameter is 12.</para>
		<para>12 will be used for any value specified less than 12.</para>
	</remarks>
</member><member name="M:Tva.IO.FilePath.GetFileList(System.String)">
	<summary>Gets a list of files for the given path and wildcard pattern (e.g., "c:\*.*").</summary>
	<param name="path">The path for which a list of files is to be returned.</param>
	<returns>A list of files for the given path.</returns>
</member><member name="M:Tva.IO.FilePath.WaitForReadLock(System.String)">
	<summary>Waits for the default duration (5 seconds) for read access on a file.</summary>
	<param name="fileName">The name of the file to wait for to obtain read access.</param>
</member><member name="M:Tva.IO.FilePath.WaitForReadLock(System.String,System.Double)">
	<summary>Waits for read access on a file for the specified number of seconds.</summary>
	<param name="fileName">The name of the file to wait for to obtain read access.</param>
	<param name="secondsToWait">The time to wait for in seconds to obtain read access on a file.</param>
	<remarks>Set secondsToWait to zero to wait infinitely.</remarks>
</member><member name="M:Tva.IO.FilePath.WaitForWriteLock(System.String)">
	<summary>Waits for the default duration (5 seconds) for write access on a file.</summary>
	<param name="fileName">The name of the file to wait for to obtain write access.</param>
</member><member name="M:Tva.IO.FilePath.WaitForWriteLock(System.String,System.Double)">
	<summary>Waits for write access on a file for the specified number of seconds.</summary>
	<param name="fileName">The name of the file to wait for to obtain write access.</param>
	<param name="secondsToWait">The time to wait for in seconds to obtain write access on a file.</param>
	<remarks>Set secondsToWait to zero to wait infinitely.</remarks>
</member><member name="M:Tva.IO.FilePath.WaitTillExists(System.String)">
	<summary>Waits for the default duration (5 seconds) for a file to exist.</summary>
	<param name="fileName">The name of the file to wait for until it is created.</param>
</member><member name="M:Tva.IO.FilePath.WaitTillExists(System.String,System.Double)">
	<summary>Waits for a file to exist for the specified number of seconds.</summary>
	<param name="fileName">The name of the file to wait for until it is created.</param>
	<param name="secondsToWait">The time to wait for in seconds for the file to be created.</param>
	<remarks>Set secondsToWait to zero to wait infinitely.</remarks>
</member><member name="P:Tva.Measurements.IMeasurement.This">
	<summary>Handy instance reference to self</summary>
</member><member name="P:Tva.Measurements.IMeasurement.ID">
	<summary>Gets or sets the numeric ID of this measurement</summary>
	<remarks>
		<para>In most implementations, this will be a required field</para>
		<para>Note that this field, in addition to Source, typically creates the primary key for a measurement</para>
	</remarks>
</member><member name="P:Tva.Measurements.IMeasurement.Source">
	<summary>Gets or sets the source of this measurement</summary>
	<remarks>
		<para>In most implementations, this will be a required field</para>
		<para>Note that this field, in addition to ID, typically creates the primary key for a measurement</para>
		<para>This value is typically used to track the archive name in which measurement is stored</para>
	</remarks>
</member><member name="P:Tva.Measurements.IMeasurement.Key">
	<summary>Returns the primary key of this measurement</summary>
</member><member name="P:Tva.Measurements.IMeasurement.Tag">
	<summary>Gets or sets the text based ID of this measurement</summary>
</member><member name="P:Tva.Measurements.IMeasurement.Value">
	<summary>Gets or sets the raw value of this measurement (i.e., the numeric value that is not offset by adder and multiplier)</summary>
</member><member name="P:Tva.Measurements.IMeasurement.AdjustedValue">
	<summary>Returns the adjusted numeric value of this measurement, taking into account the specified adder and multiplier offsets</summary>
	<remarks>
		<para>Implementors need to account for adder and multiplier in return value, e.g.:</para>
		<code>Return Value * Multiplier + Adder</code>
	</remarks>
</member><member name="P:Tva.Measurements.IMeasurement.Adder">
	<summary>Defines an offset to add to the measurement value</summary>
	<remarks>Implementors should make sure this value defaults to zero</remarks>
</member><member name="P:Tva.Measurements.IMeasurement.Multiplier">
	<summary>Defines a mulplicative offset to add to the measurement value</summary>
	<remarks>Implementors should make sure this value defaults to one</remarks>
</member><member name="P:Tva.Measurements.IMeasurement.Ticks">
	<summary>Gets or sets exact timestamp of the data represented by this measurement</summary>
	<remarks>The value of this property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001</remarks>
</member><member name="P:Tva.Measurements.IMeasurement.Timestamp">
	<summary>Date representation of ticks of this measurement</summary>
</member><member name="P:Tva.Measurements.IMeasurement.ValueQualityIsGood">
	<summary>Determines if the quality of the numeric value of this measurement is good</summary>
</member><member name="P:Tva.Measurements.IMeasurement.TimestampQualityIsGood">
	<summary>Determines if the quality of the timestamp of this measurement is good</summary>
</member><member name="T:Tva.Measurements.IMeasurement">
	<summary>Abstract measured value interface</summary>
</member><member name="T:Tva.ErrorManagement.SmtpTraceListener">
	<summary>Defines an e-mail based trace listener.</summary>
</member><member name="M:Tva.DateTime.TimeTagBase.#ctor(System.Int64,System.Double)">
	<summary>Creates new time-tag given number base time (in ticks) and seconds since base time</summary>
	<param name="baseDateOffsetTicks">Ticks of time-tag base</param>
	<param name="seconds">Number of seconds since base time</param>
</member><member name="M:Tva.DateTime.TimeTagBase.#ctor(System.Int64,System.DateTime)">
	<summary>Creates new time-tag given standard .NET DateTime</summary>
	<param name="baseDateOffsetTicks">Ticks of time-tag base</param>
	<param name="timestamp">.NET DateTime used to create time-tag from</param>
</member><member name="P:Tva.DateTime.TimeTagBase.Value">
	<summary>Value represents number of seconds since base time</summary>
</member><member name="M:Tva.DateTime.TimeTagBase.ToDateTime">
	<summary>Returns standard .NET DateTime representation for timetag</summary>
</member><member name="M:Tva.DateTime.TimeTagBase.ToString">
	<summary>Returns basic textual representation for timetag</summary>
	<remarks>Format is "yyyy-MM-dd HH:mm:ss.fff" so that textual representation can be sorted in the correct chronological order</remarks>
</member><member name="P:Tva.DateTime.TimeTagBase.BaseDateOffsetTicks">
	<summary>Ticks representing the absolute minimum time of this timetag implementation</summary>
</member><member name="M:Tva.DateTime.TimeTagBase.CompareTo(Tva.DateTime.TimeTagBase)">
	<summary>Compares this timetag to another one</summary>
</member><member name="T:Tva.DateTime.TimeTagBase">
	<summary>Base class for alternate time tag implementations</summary>
</member><member name="F:Tva.DateTime.Common.m_standardTimeNames">
	<summary>Standard time names used by SecondsToText function</summary>
</member><member name="F:Tva.DateTime.Common.m_standardTimeNamesWithoutSeconds">
	<summary>Standard time names without seconds used by SecondsToText function</summary>
</member><member name="P:Tva.DateTime.Common.TicksToSeconds(System.Int64)">
	<summary>Converts 100-nanosecond tick intervals to seconds</summary>
</member><member name="P:Tva.DateTime.Common.SecondsToTicks(System.Double)">
	<summary>Converts seconds to 100-nanosecond tick intervals</summary>
</member><member name="M:Tva.DateTime.Common.UtcTimeIsValid(System.DateTime,System.Double,System.Double)">
	<summary>Determines if the specified UTC time is valid by comparing it to the system clock</summary>
	<param name="utcTime">Time to test for validity</param>
	<param name="lagTime">Allowed lag time, in seconds, before assuming time is too old to be valid</param>
	<param name="leadTime">Allowed lead time, in seconds, before assuming time is too advanced to be valid</param>
	<returns>True if time is within the specified range</returns>
	<remarks>
		<para>Time is considered valid if it exists within the specified lag time/lead time range of current time</para>
		<para>Note that lag time and lead time must be greater than zero, but can be set to sub-second intervals</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can be less than one</exception>
</member><member name="M:Tva.DateTime.Common.UtcTimeIsValid(System.Int64,System.Double,System.Double)">
	<summary>Determines if the specified UTC time ticks are valid by comparing them to the system clock</summary>
	<param name="utcTicks">Ticks of time to test for validity</param>
	<param name="lagTime">Allowed lag time, in seconds, before assuming time is too old to be valid</param>
	<param name="leadTime">Allowed lead time, in seconds, before assuming time is too advanced to be valid</param>
	<returns>True if time is within the specified range</returns>
	<remarks>
		<para>Time is considered valid if it exists within the specified lag time/lead time range of current time</para>
		<para>Note that lag time and lead time must be greater than zero, but can be set to sub-second intervals</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can be less than one</exception>
</member><member name="M:Tva.DateTime.Common.LocalTimeIsValid(System.DateTime,System.Double,System.Double)">
	<summary>Determines if the specified local time is valid by comparing it to the system clock</summary>
	<param name="localTime">Time to test for validity</param>
	<param name="lagTime">Allowed lag time, in seconds, before assuming time is too old to be valid</param>
	<param name="leadTime">Allowed lead time, in seconds, before assuming time is too advanced to be valid</param>
	<returns>True if time is within the specified range</returns>
	<remarks>
		<para>Time is considered valid if it exists within the specified lag time/lead time range of current time</para>
		<para>Note that lag time and lead time must be greater than zero, but can be set to sub-second intervals</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can be less than one</exception>
</member><member name="M:Tva.DateTime.Common.LocalTimeIsValid(System.Int64,System.Double,System.Double)">
	<summary>Determines if the specified local time ticks are valid by comparing them to the system clock</summary>
	<param name="localTicks">Ticks of time to test for validity</param>
	<param name="lagTime">Allowed lag time, in seconds, before assuming time is too old to be valid</param>
	<param name="leadTime">Allowed lead time, in seconds, before assuming time is too advanced to be valid</param>
	<returns>True if time is within the specified range</returns>
	<remarks>
		<para>Time is considered valid if it exists within the specified lag time/lead time range of current time</para>
		<para>Note that lag time and lead time must be greater than zero, but can be set to sub-second intervals</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can be less than one</exception>
</member><member name="M:Tva.DateTime.Common.TimeIsValid(System.DateTime,System.DateTime,System.Double,System.Double)">
	<summary>Determines if time is valid by comparing it to the specified current time</summary>
	<param name="currentTime">Specified current time (e.g., could be Date.Now or Date.UtcNow)</param>
	<param name="testTime">Time to test for validity</param>
	<param name="lagTime">Allowed lag time, in seconds, before assuming time is too old to be valid</param>
	<param name="leadTime">Allowed lead time, in seconds, before assuming time is too advanced to be valid</param>
	<returns>True if time is within the specified range</returns>
	<remarks>
		<para>Time is considered valid if it exists within the specified lag time/lead time range of current time</para>
		<para>Note that lag time and lead time must be greater than zero, but can be set to sub-second intervals</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can be less than one</exception>
</member><member name="M:Tva.DateTime.Common.TimeIsValid(System.Int64,System.Int64,System.Double,System.Double)">
	<summary>Determines if time is valid by comparing it to the specified current time</summary>
	<param name="currentTicks">Specified ticks of current time (e.g., could be Date.Now.Ticks or Date.UtcNow.Ticks)</param>
	<param name="testTicks">Ticks of time to test for validity</param>
	<param name="lagTime">Allowed lag time, in seconds, before assuming time is too old to be valid</param>
	<param name="leadTime">Allowed lead time, in seconds, before assuming time is too advanced to be valid</param>
	<returns>True if time is within the specified range</returns>
	<remarks>
		<para>Time is considered valid if it exists within the specified lag time/lead time range of current time</para>
		<para>Note that lag time and lead time must be greater than zero, but can be set to sub-second intervals</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can be less than one</exception>
</member><member name="P:Tva.DateTime.Common.SystemTimer">
	<summary>Returns the number of seconds in the local timezone, including fractional seconds, since that have elapsed since 12:00:00 midnight, January 1, 0001</summary>
</member><member name="P:Tva.DateTime.Common.UtcSystemTimer">
	<summary>Returns the number of seconds in the universally coordinated timezone, including fractional seconds, since that have elapsed since 12:00:00 midnight, January 1, 0001</summary>
</member><member name="P:Tva.DateTime.Common.TicksBeyondSecond(System.Int64)">
	<summary>Determines the distance, in ticks, beyond the top of the timestamp second</summary>
	<param name="ticks">Ticks of timestamp to evaluate</param>
	<returns>Timestamp's tick distance from the top of the second</returns>
</member><member name="M:Tva.DateTime.Common.BaselinedTimestamp(System.Int64,Tva.DateTime.BaselineTimeInterval)">
	<summary>Removes any milliseconds from a timestamp value to baseline the time at the bottom of the second</summary>
	<param name="ticks">Ticks of timestamp to baseline</param>
	<param name="baselineTo">Time interval to which timestamp should be baselined</param>
</member><member name="M:Tva.DateTime.Common.BaselinedTimestamp(System.DateTime,Tva.DateTime.BaselineTimeInterval)">
	<summary>Creates a baselined the timestamp which begins at the specified time interval</summary>
	<param name="timestamp">Timestamp to baseline</param>
	<param name="baselineTo">Time interval to which timestamp should be baselined</param>
	<returns>Baselined timestamp which begins at the specified time interval</returns>
	<remarks>
		<para>Baselining to the second would return the timestamp starting at zero milliseconds</para>
		<para>Baselining to the minute would return the timestamp starting at zero seconds and milliseconds</para>
		<para>Baselining to the hour would return the timestamp starting at zero minutes, seconds and milliseconds</para>
		<para>Baselining to the day would return the timestamp starting at zero hours, minutes, seconds and milliseconds</para>
		<para>Baselining to the month would return the timestamp starting at day one, zero hours, minutes, seconds and milliseconds</para>
		<para>Baselining to the year would return the timestamp starting at month one, day one, zero hours, minutes, seconds and milliseconds</para>
	</remarks>
</member><member name="M:Tva.DateTime.Common.SecondsToText(System.Double)">
	<summary>Turns given number of seconds into textual representation of years, days, hours, minutes and whole integer seconds</summary>
	<param name="seconds">Seconds to be converted </param>
</member><member name="M:Tva.DateTime.Common.SecondsToText(System.Double,System.Int32)">
	<summary>Turns number of given seconds into textual representation of years, days, hours, minutes and seconds</summary>
	<remarks>Set second precision to -1 to suppress seconds display</remarks>
	<param name="seconds">Seconds to be converted </param>
	<param name="secondPrecision">Number of fractional digits to display for seconds</param>
</member><member name="M:Tva.DateTime.Common.SecondsToText(System.Double,System.Int32,System.String[])">
	<summary>Turns number of given seconds into textual representation of years, days, hours, minutes and seconds given string array of time names - need one for each TimeName enum item</summary>
	<remarks>
		<para>Set second precision to -1 to suppress seconds display</para>
		<para>Time names array needs one string entry per element in <see cref="T:Tva.DateTime.TimeName">TimeName</see> enumeration.</para>
		<para>Example timeNames array: "Year", "Years", "Day", "Days", "Hour", "Hours", "Minute", "Minutes", "Second", "Seconds", "Less Than 60 Seconds", "0 Seconds"</para>
	</remarks>
	<param name="seconds">Seconds to be converted</param>
	<param name="secondPrecision">Number of fractional digits to display for seconds</param>
	<param name="timeNames">Time names array to use during textal conversion</param>
</member><member name="M:Tva.DateTime.Common.GetWin32TimeZone(System.String)">
	<summary>Returns the specified Win32 time zone using its standard name</summary>
	<param name="standardName">Standard name for desired Win32 time zone</param>
</member><member name="M:Tva.DateTime.Common.GetWin32TimeZone(System.String,Tva.DateTime.TimeZoneName)">
	<summary>Returns the specified Win32 time zone using specified name</summary>
	<param name="name">Value of name used for time zone lookup</param>
	<param name="lookupBy">Type of name used for time zone lookup</param>
</member><member name="P:Tva.DateTime.Common.UniversalTimeZone">
	<summary>Universally Coordinated Time Zone (a.k.a., Greenwich Meridian Time Zone).</summary>
</member><member name="P:Tva.DateTime.Common.EasternTimeZone">
	<summary>Eastern Time Zone</summary>
</member><member name="P:Tva.DateTime.Common.CentralTimeZone">
	<summary>Central Time Zone</summary>
</member><member name="P:Tva.DateTime.Common.MountainTimeZone">
	<summary>Mountain Time Zone</summary>
</member><member name="P:Tva.DateTime.Common.PacificTimeZone">
	<summary>Pacific Standard Time Zone</summary>
</member><member name="M:Tva.DateTime.Common.LocalTimeToEasternTime(System.DateTime)">
	<summary>Converts given local time to Eastern time</summary>
	<param name="localTimestamp">Timestamp in local time to be converted to Eastern time</param>
	<returns>
		<para>Timestamp in Eastern time</para>
	</returns>
</member><member name="M:Tva.DateTime.Common.LocalTimeToCentralTime(System.DateTime)">
	<summary>Converts given local time to Central time</summary>
	<param name="localTimestamp">Timestamp in local time to be converted to Central time</param>
	<returns>
		<para>Timestamp in Central time</para>
	</returns>
</member><member name="M:Tva.DateTime.Common.LocalTimeToMountainTime(System.DateTime)">
	<summary>Converts given local time to Mountain time</summary>
	<param name="localTimestamp">Timestamp in local time to be converted to Mountain time</param>
	<returns>
		<para>Timestamp in Mountain time</para>
	</returns>
</member><member name="M:Tva.DateTime.Common.LocalTimeToPacificTime(System.DateTime)">
	<summary>Converts given local time to Pacific time</summary>
	<param name="localTimestamp">Timestamp in local time to be converted to Pacific time</param>
	<returns>
		<para>Timestamp in Pacific time</para>
	</returns>
</member><member name="M:Tva.DateTime.Common.LocalTimeToUniversalTime(System.DateTime)">
	<summary>Converts given local time to Universally Coordinated Time (a.k.a., Greenwich Meridian Time).</summary>
	<remarks>This function is only provided for the sake of completeness - all it does is call the "ToUniversalTime" property on the given timestamp.</remarks>
	<param name="localTimestamp">Timestamp in local time to be converted to Universal time</param>
	<returns>
		<para>Timestamp in UniversalTime (a.k.a., GMT)</para>
	</returns>
</member><member name="M:Tva.DateTime.Common.LocalTimeTo(System.DateTime,System.String)">
	<summary>Converts given local time to time in specified time zone</summary>
	<param name="localTimestamp">Timestamp in local time to be converted to time in specified time zone</param>
	<param name="destinationTimeZoneStandardName">Standard name of desired end time zone for given timestamp</param>
	<returns>
		<para>Timestamp in specified time zone</para>
	</returns>
</member><member name="M:Tva.DateTime.Common.LocalTimeTo(System.DateTime,Tva.DateTime.Win32TimeZone)">
	<summary>Converts given local time to time in specified time zone</summary>
	<param name="localTimestamp">Timestamp in local time to be converted to time in specified time zone</param>
	<param name="destinationTimeZone">Desired end time zone for given timestamp</param>
	<returns>
		<para>Timestamp in specified time zone</para>
	</returns>
</member><member name="M:Tva.DateTime.Common.TimeZoneToTimeZone(System.DateTime,System.String,System.String)">
	<summary>Converts given timestamp from one time zone to another using standard names for time zones</summary>
	<param name="timestamp">Timestamp in source time zone to be converted to time in destination time zone</param>
	<param name="sourceTimeZoneStandardName">Standard name of time zone for given source timestamp</param>
	<param name="destinationTimeZoneStandardName">Standard name of desired end time zone for given source timestamp</param>
	<returns>
		<para>Timestamp in destination time zone</para>
	</returns>
</member><member name="M:Tva.DateTime.Common.TimeZoneToTimeZone(System.DateTime,Tva.DateTime.Win32TimeZone,Tva.DateTime.Win32TimeZone)">
	<summary>Converts given timestamp from one time zone to another</summary>
	<param name="timestamp">Timestamp in source time zone to be converted to time in destination time zone</param>
	<param name="sourceTimeZone">Time zone for given source timestamp</param>
	<param name="destinationTimeZone">Desired end time zone for given source timestamp</param>
	<returns>
		<para>Timestamp in destination time zone</para>
	</returns>
</member><member name="P:Tva.DateTime.Common.ShortMonthName(System.Int32)">
	<summary>Returns 3 letter month abbreviation for given month number (1-12).</summary>
	<remarks>Month abbreviations are English only.</remarks>
	<param name="monthNumber">Numeric month number (1-12)</param>
</member><member name="P:Tva.DateTime.Common.LongMonthName(System.Int32)">
	<summary>Returns full month name for given month number (1-12).</summary>
	<remarks>Month names are English only.</remarks>
	<param name="monthNumber">Numeric month number (1-12)</param>
</member><member name="T:Tva.DateTime.Common">
	<summary>Defines common global functions related to Date/Time manipulation</summary>
</member><member name="P:Tva.Scheduling.SchedulePart.Text">
	<summary>
 Gets the text used for populating the values of the schedule part.
 </summary>
	<value></value>
	<returns>The text used for populating the values of the schedule part.</returns>
</member><member name="P:Tva.Scheduling.SchedulePart.DateTimePart">
	<summary>
 Gets the date-time part that the schedule part represents in a Tva.Scheduling.Schedule.
 </summary>
	<value></value>
	<returns>The date-time part that the schedule part represents in a Tva.Scheduling.Schedule.</returns>
</member><member name="P:Tva.Scheduling.SchedulePart.TextSyntax">
	<summary>
 Gets the syntax used in the text specified for populating the values of the schedule part.
 </summary>
	<value></value>
	<returns>The syntax used in the text specified for populating the values of the schedule part.</returns>
</member><member name="P:Tva.Scheduling.SchedulePart.Description">
	<summary>
 Gets a meaningful description of the schedule part.
 </summary>
	<value></value>
	<returns>A meaningful description of the schedule part.</returns>
</member><member name="P:Tva.Scheduling.SchedulePart.Values">
	<summary>
 Gets a list of values that were populated from based on the specified text and date-time part that the 
 schedule part represents.
 </summary>
	<value></value>
	<returns>
 A list of values that were populated from based on the specified text and date-time part that the 
 schedule part represents.</returns>
</member><member name="T:Tva.Data.ConnectionType">
	<summary>
 Types of data providers.
 </summary>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.CategorizedSettingsSection.Category(System.String)">
	<summary>
 Gets the Tva.Configuration.CategorizedSettingsCollection for the specified category name.
 </summary>
	<param name="name">The name of the Tva.Configuration.CategorizedSettingsCollection to return.</param>
	<value></value>
	<returns>The Tva.Configuration.CategorizedSettingsCollection with the specified name; otherwise null.</returns>
	<remarks></remarks>
</member><member name="P:Tva.Configuration.CategorizedSettingsSection.General">
	<summary>
 Gets the "general" category under the "categorizedSettings" of the configuration file.
 </summary>
	<value></value>
	<returns>The Tva.Configuration.CategorizedSettingsCollection of the "general" category.</returns>
	<remarks></remarks>
</member><member name="T:Tva.Configuration.CategorizedSettingsSection">
	<summary>
 Represents a section in the configuration with one or more Tva.Configuration.CategorizedSettingsCollection.
 </summary>
	<remarks></remarks>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.This">
	<summary>Handy instance reference to self</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.MeasurementKeys">
	<summary>Returns key collection of measurement keys</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.Tags">
	<summary>Returns key collection for measurement tags</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.TagMeasurementKeys(System.String)">
	<summary>Returns measurement key list of specified tag, if it exists</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.Value(System.Int32,System.String)">
	<summary>We retrieve measurement values within time tolerance of concentrator real-time</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.Value(Tva.Measurements.MeasurementKey)">
	<summary>We retrieve measurement values within time tolerance of concentrator real-time</summary>
</member><member name="M:Tva.Measurements.ImmediateMeasurements.UpdateMeasurementValue(Tva.Measurements.IMeasurement)">
	<summary>We only store a new measurement value that is newer than the cached value</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.Measurement(System.Int32,System.String)">
	<summary>Retrieves the specified immediate temporal measurement, creating it if needed</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.Measurement(Tva.Measurements.MeasurementKey)">
	<summary>Retrieves the specified immediate temporal measurement, creating it if needed</summary>
</member><member name="M:Tva.Measurements.ImmediateMeasurements.DefineTaggedMeasurements(System.Data.DataTable)">
	<summary>Defines tagged measurements from a data table</summary>
	<remarks>Expects tag field to be aliased as "Tag", measurement ID field to be aliased as "ID" and source field to be aliased as "Source"</remarks>
</member><member name="M:Tva.Measurements.ImmediateMeasurements.AddTaggedMeasurement(System.String,Tva.Measurements.MeasurementKey)">
	<summary>Associates a new measurement ID with a tag, creating the new tag if needed</summary>
	<remarks>Allows you to define "grouped" points so you can aggregate certain measurements</remarks>
</member><member name="M:Tva.Measurements.ImmediateMeasurements.CalculateAverage(System.Int32@)">
	<summary>Calculates an average of all measurements</summary>
	<remarks>This is only useful if all measurements represent the same type of measurement</remarks>
</member><member name="M:Tva.Measurements.ImmediateMeasurements.CalculateTagAverage(System.String,System.Int32@)">
	<summary>Calculates an average of all measurements associated with the specified tag</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.Minimum">
	<summary>Returns the minimum value of all measurements</summary>
	<remarks>This is only useful if all measurements represent the same type of measurement</remarks>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.Maximum">
	<summary>Returns the maximum value of all measurements</summary>
	<remarks>This is only useful if all measurements represent the same type of measurement</remarks>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.TagMinimum(System.String)">
	<summary>Returns the minimum value of all measurements associated with the specified tag</summary>
</member><member name="P:Tva.Measurements.ImmediateMeasurements.TagMaximum(System.String)">
	<summary>Returns the maximum value of all measurements associated with the specified tag</summary>
</member><member name="T:Tva.Measurements.ImmediateMeasurements">
	<summary>This class represents the absolute latest received measurement values</summary>
</member><member name="P:Tva.Interop.BitwiseCast.ToInt16(System.UInt16)">
	<summary>Performs proper bitwise conversion between unsigned and signed value</summary>
	<remarks>
		<para>This function is useful because Convert.ToInt16 will throw an OverflowException for values greater than Int16.MaxValue.</para>
		<para>For example, this function correctly converts unsigned 16-bit integer 65535 (i.e., UInt16.MaxValue) to signed 16-bit integer 32767 (i.e., Int16.MaxValue).</para>
	</remarks>
</member><member name="P:Tva.Interop.BitwiseCast.ToInt32(System.UInt32)">
	<summary>Performs proper bitwise conversion between unsigned and signed value</summary>
	<remarks>
		<para>This function is useful because Convert.ToInt32 will throw an OverflowException for values greater than Int32.MaxValue.</para>
		<para>For example, this function correctly converts unsigned 32-bit integer 4294967295 (i.e., UInt16.MaxValue) to signed 32-bit integer 2147483647 (i.e., Int32.MaxValue).</para>
	</remarks>
</member><member name="P:Tva.Interop.BitwiseCast.ToInt64(System.UInt64)">
	<summary>Performs proper bitwise conversion between unsigned and signed value</summary>
	<remarks>
		<para>This function is useful because Convert.ToInt64 will throw an OverflowException for values greater than Int64.MaxValue.</para>
		<para>For example, this function correctly converts unsigned 64-bit integer 18446744073709551615 (i.e., UInt64.MaxValue) to signed 64-bit integer 9223372036854775807 (i.e., Int64.MaxValue).</para>
	</remarks>
</member><member name="P:Tva.Interop.BitwiseCast.ToUInt16(System.Int16)">
	<summary>Performs proper bitwise conversion between signed and unsigned value</summary>
	<remarks>
		<para>This function is useful because Convert.ToUInt16 will throw an OverflowException for values less than zero.</para>
		<para>For example, this function correctly converts signed 16-bit integer -32768 (i.e., Int16.MinValue) to unsigned 16-bit integer 0 (i.e., UInt16.MinValue).</para>
	</remarks>
</member><member name="P:Tva.Interop.BitwiseCast.ToUInt32(System.Int32)">
	<summary>Performs proper bitwise conversion between signed and unsigned value</summary>
	<remarks>
		<para>This function is useful because Convert.ToUInt32 will throw an OverflowException for values less than zero.</para>
		<para>For example, this function correctly converts signed 32-bit integer -2147483648 (i.e., Int32.MinValue) to unsigned 32-bit integer 0 (i.e., UInt32.MinValue).</para>
	</remarks>
</member><member name="P:Tva.Interop.BitwiseCast.ToUInt64(System.Int64)">
	<summary>Performs proper bitwise conversion between signed and unsigned value</summary>
	<remarks>
		<para>This function is useful because Convert.ToUInt64 will throw an OverflowException for values less than zero.</para>
		<para>For example, this function correctly converts signed 64-bit integer -9223372036854775808 (i.e., Int64.MinValue) to unsigned 64-bit integer 0 (i.e., UInt64.MinValue).</para>
	</remarks>
</member><member name="T:Tva.Interop.BitwiseCast">
	<summary>Defines specialized bitwise integer data type conversion functions</summary>
</member><member name="T:Tva.DateTime.Win32TimeZone">
	<summary>Win32 time zone class</summary>
</member><member name="P:Tva.Measurements.TemporalMeasurement.LagTime">
	<summary>Allowed past time deviation tolerance in seconds (can be subsecond)</summary>
	<remarks>
		<para>This value defines the time sensitivity to past measurement timestamps.</para>
		<para>Defined the number of seconds allowed before assuming a measurement timestamp is too old.</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LagTime must be greater than zero, but it can be less than one</exception>
</member><member name="P:Tva.Measurements.TemporalMeasurement.LeadTime">
	<summary>Allowed future time deviation tolerance in seconds (can be subsecond)</summary>
	<remarks>
		<para>This value defines the time sensitivity to future measurement timestamps.</para>
		<para>Defined the number of seconds allowed before assuming a measurement timestamp is too advanced.</para>
	</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">LeadTime must be greater than zero, but it can be less than one</exception>
</member><member name="P:Tva.Measurements.TemporalMeasurement.AdjustedValue(System.Int64)">
	<summary>Returns numeric adjusted value of this measurement, constrained within specified ticks</summary>
	<remarks>
		<para>Operation will return NaN if ticks are outside of time deviation tolerances</para>
		<para>Note that returned value will be offset by adder and multiplier</para>
	</remarks>
	<returns>Value offset by adder and multipler (i.e., Value * Multiplier + Adder)</returns>
</member><member name="P:Tva.Measurements.TemporalMeasurement.Value(System.Int64)">
	<summary>Gets or sets numeric value of this measurement, constrained within specified ticks</summary>
	<remarks>
		<para>Get operation will return NaN if ticks are outside of time deviation tolerances</para>
		<para>Set operation will only store a value that is newer than the cached value</para>
	</remarks>
	<returns>Raw value of this measurement (i.e., value that is not offset by adder and multiplier)</returns>
</member><member name="P:Tva.Measurements.TemporalMeasurement.Value(System.DateTime)">
	<summary>Gets or sets numeric value of this measurement, constrained within specified timestamp</summary>
	<remarks>
		<para>Get operation will return NaN if timestamp is outside of time deviation tolerances</para>
		<para>Set operation will only store a value that is newer than the cached value</para>
	</remarks>
	<returns>Raw value of this measurement (i.e., value that is not offset by adder and multiplier)</returns>
</member>
</members>
</doc>